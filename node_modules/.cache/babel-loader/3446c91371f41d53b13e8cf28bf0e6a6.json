{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldUpdateDrawnRows = shouldUpdateDrawnRows;\nexports.setCurrentPosition = setCurrentPosition;\nexports.updatePositionProperties = updatePositionProperties;\nexports.updateRenderedData = updateRenderedData;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _initialState = require('./initial-state');\n\nvar _initialState2 = _interopRequireDefault(_initialState);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction shouldUpdateDrawnRows(action, state) {\n  var height = state.getIn(['currentPosition', 'height']);\n  var width = state.getIn(['currentPosition', 'width']); // If the containers have changed size, update drawn rows.\n\n  if (height != action.yVisible || width != action.xVisible) return true;\n  var yScrollChangePosition = state.getIn(['currentPosition', 'yScrollChangePosition']);\n  var rowHeight = state.getIn(['positionConfig', 'rowHeight']); // Get the current visible record count.\n\n  var visibleRecordCount = getVisibleRecordCount(state); // Get the count of rendered rows.\n\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var endDisplayIndex = state.getIn(['currentPosition', 'renderedEndDisplayIndex']);\n  var renderedRecordCount = endDisplayIndex - startDisplayIndex; // Calculate the height of a third of the difference.\n\n  var rowDifferenceHeight = rowHeight * (renderedRecordCount - visibleRecordCount) / 3;\n  return Math.abs(action.yScrollPosition - yScrollChangePosition) >= rowDifferenceHeight;\n}\n\nfunction setCurrentPosition(state, yScrollPosition, xScrollPosition) {\n  return state.setIn(['currentPosition', 'yScrollChangePosition'], yScrollPosition).setIn(['currentPosition', 'xScrollChangePosition'], xScrollPosition);\n}\n\nfunction updatePositionProperties(action, state, force) {\n  if (!action.force && !shouldUpdateDrawnRows(action, state) && !_immutable2.default.is(state.get('currentPosition'), (0, _initialState2.default)().get('currentPosition'))) {\n    return state; // Indicate that this shouldn't result in an emit.\n  }\n\n  var sizeUpdatedState = state.setIn(['currentPosition', 'height'], action.yVisible ? action.yVisible * 1.2 : state.getIn(['currentPosition', 'height'])).setIn(['currentPosition', 'width'], action.xVisible || state.getIn(['currentPosition', 'width']));\n  var visibleRecordCount = getVisibleRecordCount(sizeUpdatedState);\n  var visibleDataLength = helpers.getDataSetSize(sizeUpdatedState);\n  var rowHeight = sizeUpdatedState.getIn(['positionConfig', 'rowHeight']);\n  var verticalScrollPosition = action.yScrollPosition || 0;\n  var horizontalScrollPosition = action.xScrollPosition || 0; // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n\n  var renderedStartDisplayIndex = Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n  var renderedEndDisplayIndex = Math.min(Math.floor(renderedStartDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n  return setCurrentPosition(sizeUpdatedState, verticalScrollPosition, horizontalScrollPosition).setIn(['currentPosition', 'renderedStartDisplayIndex'], renderedStartDisplayIndex).setIn(['currentPosition', 'renderedEndDisplayIndex'], renderedEndDisplayIndex).setIn(['currentPosition', 'visibleDataLength'], visibleDataLength);\n}\n\nfunction updateRenderedData(state) {\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var columns = helpers.getDataColumns(state, data);\n  var data = helpers.getDataSet(state);\n  return state.set('renderedData', helpers.getVisibleDataColumns(data.skip(startDisplayIndex).take(state.getIn(['currentPosition', 'renderedEndDisplayIndex']) - startDisplayIndex), columns));\n}","map":null,"metadata":{},"sourceType":"script"}