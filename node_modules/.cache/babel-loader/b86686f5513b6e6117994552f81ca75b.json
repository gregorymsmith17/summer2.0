{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.getColumnProperties = getColumnProperties;\nvar offset = 1000;\n/** Gets a column properties object from an array of columnNames\n * @param {Array<string>} columns - array of column names\n */\n\nfunction getColumnPropertiesFromColumnArray(columnProperties, columns) {\n  return columns.reduce(function (previous, current, i) {\n    previous[current] = {\n      id: current,\n      order: offset + i\n    };\n    return previous;\n  }, columnProperties);\n}\n/** Gets the column properties object from a react component (rowProperties) that contains child component(s) for columnProperties.\n *    If no properties are found, it will work return a column properties object based on the all columns array\n * @param {Object} rowProperties - An React component that contains the rowProperties and child columnProperties components\n * @param {Array<string> optional} allColumns - An optional array of colummn names. This will be used to generate the columnProperties when they are not defined in rowProperties\n */\n\n\nfunction getColumnProperties(rowProperties) {\n  var allColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var children = rowProperties && rowProperties.props && rowProperties.props.children;\n  var columnProperties = {}; // Working against an array of columnProperties\n\n  if (Array.isArray(children)) {\n    // build one object that contains all of the column properties keyed by id\n    children.reduce(function (previous, current, i) {\n      if (current) {\n        previous[current.props.id] = _extends({\n          order: offset + i\n        }, current.props);\n      }\n\n      return previous;\n    }, columnProperties); // Working against a lone, columnProperties object\n  } else if (children && children.props) {\n    columnProperties[children.props.id] = _extends({\n      order: offset\n    }, children.props);\n  }\n\n  if (Object.keys(columnProperties).length === 0 && allColumns) {\n    getColumnPropertiesFromColumnArray(columnProperties, allColumns);\n  }\n\n  return columnProperties;\n}","map":null,"metadata":{},"sourceType":"script"}