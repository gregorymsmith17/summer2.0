{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _darkSkySkeleton = require('dark-sky-skeleton');\n\nvar _darkSkySkeleton2 = _interopRequireDefault(_darkSkySkeleton);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _geoLocUtils = require('geo-loc-utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar config = {\n  storageKeyCurrent: 'weather-data-current',\n  storageKeyForecast: 'weather-data-forecast',\n  dateFormat: 'YYYY-MM-DDTHH:mm:ss',\n  errorMessage: {\n    noApiKeyOrProxy: 'No Dark Sky api key set and no proxy url set',\n    noTimeSupplied: 'No time supplied for time machine request'\n  },\n  warningMessage: {\n    cantGuessUnits: 'Can\\'t guess units. Defaulting to Imperial',\n    invalidUnit: 'not an accepted API unit.',\n    invalidLanguage: 'not an accepted API lanugage.'\n  },\n  excludes: ['alerts', 'currently', 'daily', 'flags', 'hourly', 'minutely'],\n  acceptedUnits: ['auto', 'ca', 'uk2', 'us', 'si'],\n  acceptedLanguage: ['ar', 'az', 'be', 'bs', 'cs', 'de', 'el', 'en', 'es', 'fr', 'hr', 'hu', 'id', 'it', 'is', 'kw', 'nb', 'nl', 'pl', 'pt', 'ru', 'sk', 'sr', 'sv', 'tet', 'tr', 'uk', 'x-pig-latin', 'zh', 'zh-tw']\n};\n\nvar DarkSkyApi = function () {\n  // darkSkyApi; instance of dark-sky-skeleton\n  // initialized; whether the instance of dark-sky-api has lat and long set\n  // _units;\n  // _language;\n  // _extendHourly\n  // _postProcessor\n\n  /**\r\n   * @param {string} apiKey - dark sky api key - consider using a proxy\r\n   * @param {string|boolean} proxy - make request behind proxy to hide api key or set to true to indicate caller is server-side\r\n   * @param {string} units\r\n   * @param {string} language\r\n   * @param {func} processor\r\n   */\n  function DarkSkyApi(apiKey, proxy, units, language, processor) {\n    _classCallCheck(this, DarkSkyApi);\n\n    this.darkSkyApi = new _darkSkySkeleton2.default(apiKey, proxy);\n    this._units = units || 'us';\n    this._language = language || 'en';\n    this._postProcessor = processor || null;\n  }\n  /**\r\n   * Initialze dark sky api with position data - Chainable\r\n   * @param {object} position - containing geo latitude and longitude\r\n   * @see DarkSkyApi.getNavigatorCoords\r\n   */\n\n\n  _createClass(DarkSkyApi, [{\n    key: 'initialize',\n    value: function initialize(position) {\n      this.position(position);\n      this.initialized = true;\n      return this;\n    }\n    /**\r\n     * Set dark sky api position data - Chainable\r\n     * @param {object} position - containing geo latitude and longitude\r\n     */\n\n  }, {\n    key: 'position',\n    value: function position(_ref) {\n      var latitude = _ref.latitude,\n          longitude = _ref.longitude;\n      this.darkSkyApi.latitude(latitude).longitude(longitude);\n      this.initialized = true;\n      return this;\n    }\n    /**\r\n     * Set unit type for response formatting - Chainable\r\n     * @param {String} value - unit token\r\n     */\n\n  }, {\n    key: 'units',\n    value: function units(value) {\n      if (config.acceptedUnits.indexOf(value) === -1) {\n        console.warn(value + ' ' + config.warningMessage.invalidUnit); // eslint-disable-line no-console\n      } else {\n        !value ? null : this._units = value;\n      }\n\n      return this;\n    }\n    /**\r\n     * Set language for response summaries\r\n     * @param {String} value - language token\r\n     */\n\n  }, {\n    key: 'language',\n    value: function language(value) {\n      if (config.acceptedLanguage.indexOf(value) === -1) {\n        console.warn(value + ' ' + config.warningMessage.invalidLanguage); // eslint-disable-line no-console\n      } else {\n        !value ? null : this._language = value;\n      }\n\n      return this;\n    }\n  }, {\n    key: 'time',\n    value: function time() {\n      console.warn('dark-sky-api: The \\'time\\' method is deprecated. Pass your time to loadTime');\n    }\n    /**\r\n     * Add a post processor for weather items - accepts a weather data object as single parameter - must return object\r\n     * @param {function} func \r\n     */\n\n  }, {\n    key: 'postProcessor',\n    value: function postProcessor(func) {\n      this._postProcessor = func;\n      return this;\n    }\n    /**\r\n     * Set whether to extend forecast with additional hours\r\n     * @param {bool} extend\r\n     */\n\n  }, {\n    key: 'extendHourly',\n    value: function extendHourly(extend) {\n      this._extendHourly = extend;\n    }\n    /**\r\n     * Get forecasted week of weather\r\n     * @param {object} [position] - if omitted will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadCurrent',\n    value: function loadCurrent(position) {\n      var _this = this;\n\n      if (position) {\n        this.position(position);\n      } else if (!this.initialized) {\n        return this.loadPosition().then(function (position) {\n          return _this.initialize(position).loadCurrent();\n        });\n      }\n\n      return this.darkSkyApi.units(this._units).language(this._language).exclude(config.excludes.filter(function (val) {\n        return val != 'currently';\n      }).join(',')).time(false).get().then(function (_ref2) {\n        var currently = _ref2.currently;\n        return _this.processWeatherItem(currently);\n      });\n    }\n    /**\r\n     * Get forecasted week of weather\r\n     * @param {object} [position] - if omitted will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadForecast',\n    value: function loadForecast(position) {\n      var _this2 = this;\n\n      if (position) {\n        this.position(position);\n      } else if (!this.initialized) {\n        return this.loadPosition().then(function (position) {\n          return _this2.initialize(position).loadForecast();\n        });\n      }\n\n      return this.darkSkyApi.units(this._units).language(this._language).exclude(config.excludes.filter(function (val) {\n        return val != 'daily';\n      }).join(',')).extendHourly(this._extendHourly).time(false).get().then(function (data) {\n        !data.daily.data ? null : data.daily.data = data.daily.data.map(function (item) {\n          return _this2.processWeatherItem(item);\n        });\n        !data.daily ? null : data.daily.updatedDateTime = (0, _moment2.default)();\n        return data;\n      });\n    }\n    /** \r\n     * Get the whole kit and kaboodle - contains currently, minutely, hourly, daily, alerts, and flags unless excluded\r\n     * daily and durrently are processed if returned\r\n     * @param {string} excludesBlock - pass comma separated excludes\r\n     * @param {object} [position] - if omitted will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadItAll',\n    value: function loadItAll(excludesBlock, position) {\n      var _this3 = this;\n\n      if (position) {\n        this.position(position);\n      } else if (!this.initialized) {\n        return this.loadPosition().then(function (position) {\n          return _this3.initialize(position).loadItAll(excludesBlock);\n        });\n      }\n\n      return this.darkSkyApi.units(this._units).language(this._language).exclude(excludesBlock).extendHourly(this._extendHourly).time(false).get().then(function (data) {\n        // process current block\n        !data.currently ? null : data.currently = _this3.processWeatherItem(data.currently); // process daily block\n\n        if (data.daily) {\n          !data.daily.data ? null : data.daily.data = data.daily.data.map(function (item) {\n            return _this3.processWeatherItem(item);\n          });\n        }\n\n        data.updatedDateTime = (0, _moment2.default)();\n        return data;\n      });\n    }\n    /**\r\n     * Time machine request\r\n     * @ref https://darksky.net/dev/docs/time-machine\r\n     * @param {*} [time] formatted date time string in format: 'YYYY-MM-DDTHH:mm:ss' i.e. 2000-04-06T12:20:05\r\n     * @param {object} [position] - if omitted will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadTime',\n    value: function loadTime(time, position) {\n      var _this4 = this;\n\n      if (position) {\n        this.position(position);\n      } else if (!this.initialized) {\n        return this.loadPosition().then(function (position) {\n          return _this4.initialize(position).loadTime(time);\n        });\n      }\n\n      if (!time) {\n        throw new Error(config.errorMessage.noTimeSupplied);\n      }\n\n      time = _moment2.default.isMoment(time) ? time.format(config.dateFormat) : time;\n      return this.darkSkyApi.units(this._units).language(this._language).extendHourly(this._extendHourly).time(time).get().then(function (data) {\n        !data.currently ? null : data.currently = _this4.processWeatherItem(data.currently);\n        !data.daily.data ? null : data.daily.data = data.daily.data.map(function (item) {\n          return _this4.processWeatherItem(item);\n        });\n        return data;\n      });\n    }\n    /** \r\n     * Make response a bit more friendly\r\n     * @param {object} item - item to process\r\n     */\n\n  }, {\n    key: 'processWeatherItem',\n    value: function processWeatherItem(item) {\n      item.windDirection = (0, _geoLocUtils.degreeToCardinal)(item.windBearing);\n      !item.nearestStormBearing ? null : item.nearestStormDirection = (0, _geoLocUtils.degreeToCardinal)(item.nearestStormBearing);\n      item.dateTime = _moment2.default.unix(item.time);\n      !item.sunriseTime ? null : item.sunriseDateTime = _moment2.default.unix(item.sunriseTime);\n      !item.sunsetTime ? null : item.sunsetDateTime = _moment2.default.unix(item.sunsetTime);\n      !item.temperatureMinTime ? null : item.temperatureMinDateTime = _moment2.default.unix(item.temperatureMinTime);\n      !item.temperatureMaxTime ? null : item.temperatureMaxDateTime = _moment2.default.unix(item.temperatureMaxTime);\n      !item.apparentTemperatureMinTime ? null : item.apparentTemperatureMinDateTime = _moment2.default.unix(item.apparentTemperatureMinTime);\n      !item.apparentTemperatureMaxTime ? null : item.apparentTemperatureMaxDateTime = _moment2.default.unix(item.apparentTemperatureMaxTime);\n      !this._postProcessor ? null : item = this._postProcessor(item);\n      return item;\n    }\n    /**\r\n     * Get units object showing units returned based on configured units\r\n     * @returns {object} units\r\n     */\n\n  }, {\n    key: 'getResponseUnits',\n    value: function getResponseUnits() {\n      var unitsObject = void 0,\n          unitsId = void 0;\n\n      if (this._units === 'auto') {\n        console.warn(config.warningMessage.cantGuessUnits); // eslint-disable-line no-console\n\n        unitsId = 'us';\n      } else {\n        unitsId = this._units;\n      } // get units object by id\n\n\n      switch (unitsId) {\n        case 'us':\n          unitsObject = DarkSkyApi.getUsUnits();\n          break;\n\n        case 'ca':\n          unitsObject = DarkSkyApi.getCaUnits();\n          break;\n\n        case 'uk2':\n          unitsObject = DarkSkyApi.getUk2Units();\n          break;\n\n        case 'si':\n          unitsObject = DarkSkyApi.getSiUnits();\n          break;\n      }\n\n      return unitsObject;\n    }\n    /**\r\n     *  Get browser navigator coords - Promise\r\n     */\n\n  }, {\n    key: 'loadPosition',\n    value: function loadPosition() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return DarkSkyApi.loadPosition(options);\n    } // allow config and deferring of initialization\n\n    /**\r\n     *  Get browser navigator coords - Promise\r\n     */\n\n  }], [{\n    key: 'initialize',\n\n    /**\r\n     * Initialize a static instance of weather api with dark sky api key\r\n     * @param {string} apiKey \r\n     * @param {string|boolean} proxy \r\n     */\n    value: function initialize(apiKey, proxy, units, language, postProcessor) {\n      if (this._api) {\n        return;\n      }\n\n      if (!this.apiKey && !this.proxy && !apiKey && !proxy) {\n        throw new Error(config.errorMessage.noApiKeyOrProxy);\n      }\n\n      var key = apiKey || this.apiKey || '';\n      var proxyService = proxy || this.proxy || '';\n      var unit = units || this.units || '';\n      var lang = language || this.language || '';\n      var processor = postProcessor || this.postProcessor || null;\n      this._api = new DarkSkyApi(key, proxyService, unit, lang, processor);\n    }\n    /**\r\n     * Get units object showing units returned based on configured units - initialize or configure with api key or proxy first\r\n     * @returns {object} units\r\n     */\n\n  }, {\n    key: 'getResponseUnits',\n    value: function getResponseUnits() {\n      this.initialize();\n      return this._api.getResponseUnits();\n    }\n    /**\r\n     * Set unit type for response formatting - initialize or configure with api key or proxy first\r\n     * @param {String} value - unit token\r\n     */\n\n  }, {\n    key: 'setUnits',\n    value: function setUnits(units) {\n      this.initialize();\n\n      this._api.units(units);\n    }\n    /**\r\n     * Set language for response summaries - initialize or configure with api key or proxy first\r\n     * @param {String} value - language token\r\n     */\n\n  }, {\n    key: 'setLanguage',\n    value: function setLanguage(language) {\n      this.initialize();\n\n      this._api.language(language);\n    }\n    /**\r\n     * Return hour-by-hour data for the next 168 hours, instead of the next 48. \r\n     * @param {bool} extend whether to extend the request hours\r\n     */\n\n  }, {\n    key: 'extendHourly',\n    value: function extendHourly(extend) {\n      this.initialize();\n\n      this._api.extendHourly(extend);\n    }\n    /**\r\n     * Set post processor for weather items - accepts a weather data object as single parameter - initialize or configure with api key or proxy first - must return object\r\n     * @param {function} func \r\n     */\n\n  }, {\n    key: 'setPostProcessor',\n    value: function setPostProcessor(func) {\n      this.initialize();\n\n      this._api.postProcessor(func);\n    }\n    /**\r\n     * Get today's weather - Promise\r\n     * @param {object} [position] - if omitted will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadCurrent',\n    value: function loadCurrent(position) {\n      this.initialize();\n\n      if (position) {\n        return this._api.position(position).loadCurrent();\n      } else {\n        return this._api.loadCurrent();\n      }\n    }\n    /**\r\n     * Get forecasted week of weather - Promise\r\n     * @param {object} [position] - if omitted api will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadForecast',\n    value: function loadForecast(position) {\n      this.initialize();\n\n      if (position) {\n        return this._api.position(position).loadForecast();\n      } else {\n        return this._api.loadForecast();\n      }\n    }\n  }, {\n    key: 'setTime',\n    value: function setTime() {\n      console.warn('dark-sky-api: The \\'setTime\\' method is deprecated. Pass your time to loadTime');\n    }\n    /** \r\n     * Get the whole kit and kaboodle - contains currently, minutely, hourly, daily, alerts, and flags unless excluded\r\n     * daily and currently are processed if returned\r\n     * @param {string} excludesBlock - pass comma separated excludes\r\n     * @param {object} [position] - if omitted api will use loadPosition\r\n     */\n\n  }, {\n    key: 'loadItAll',\n    value: function loadItAll(excludesBlock, position) {\n      this.initialize();\n\n      if (position) {\n        return this._api.position(position).loadItAll(excludesBlock);\n      } else {\n        return this._api.loadItAll(excludesBlock);\n      }\n    }\n  }, {\n    key: 'loadTime',\n    value: function loadTime(time, position) {\n      this.initialize();\n\n      if (!time) {\n        throw new Error(config.errorMessage.noTimeSupplied);\n      }\n\n      if (position) {\n        return this._api.position(position).loadTime(time);\n      } else {\n        return this._api.loadTime(time);\n      }\n    }\n    /**\r\n     * Return the us response units\r\n     * @return {object} units\r\n     */\n\n  }, {\n    key: 'getUsUnits',\n    value: function getUsUnits() {\n      return {\n        nearestStormDistance: 'mi',\n        precipIntensity: 'in/h',\n        precipIntensityMax: 'in/h',\n        precipAccumulation: 'in',\n        temperature: 'f',\n        temperatureMin: 'f',\n        temperatureMax: 'f',\n        apparentTemperature: 'f',\n        dewPoint: 'f',\n        windSpeed: 'mph',\n        pressure: 'mbar',\n        visibility: 'mi'\n      };\n    }\n    /**\r\n     * Return the si response units\r\n     * @return {object} units\r\n     */\n\n  }, {\n    key: 'getSiUnits',\n    value: function getSiUnits() {\n      return {\n        nearestStormDistance: 'km',\n        precipIntensity: 'mm/h',\n        precipIntensityMax: 'mm/h',\n        precipAccumulation: 'cm',\n        temperature: 'c',\n        temperatureMin: 'c',\n        temperatureMax: 'c',\n        apparentTemperature: 'c',\n        dewPoint: 'c',\n        windSpeed: 'mps',\n        pressure: 'hPa',\n        visibility: 'km'\n      };\n    }\n    /** \r\n     * Return ca response units\r\n     * @return {object} units\r\n     */\n\n  }, {\n    key: 'getCaUnits',\n    value: function getCaUnits() {\n      var unitsObject = this.getUsUnits();\n      unitsObject.windSpeed = 'km/h';\n      return unitsObject;\n    }\n    /**\r\n     * Return uk2 response units\r\n     * @return {object} units\r\n     */\n\n  }, {\n    key: 'getUk2Units',\n    value: function getUk2Units() {\n      var unitsObject = this.getSiUnits();\n      unitsObject.nearestStormDistance = unitsObject.visibility = 'mi';\n      unitsObject.windSpeed = 'mph';\n      return unitsObject;\n    }\n  }]);\n\n  return DarkSkyApi;\n}();\n\nDarkSkyApi.loadPosition = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (0, _geoLocUtils.getNavigatorCoords)(options);\n};\n\nexports.default = DarkSkyApi;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}