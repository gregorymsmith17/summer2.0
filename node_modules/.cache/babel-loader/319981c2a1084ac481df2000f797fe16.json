{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _flowRight2 = require('lodash/flowRight');\n\nvar _flowRight3 = _interopRequireDefault(_flowRight2);\n\nvar _flow2 = require('lodash/flow');\n\nvar _flow3 = _interopRequireDefault(_flow2);\n\nvar _pickBy2 = require('lodash/pickBy');\n\nvar _pickBy3 = _interopRequireDefault(_pickBy2);\n\nvar _flattenDeep2 = require('lodash/flattenDeep');\n\nvar _flattenDeep3 = _interopRequireDefault(_flattenDeep2);\n\nvar _uniq2 = require('lodash/uniq');\n\nvar _uniq3 = _interopRequireDefault(_uniq2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _extend2 = require('lodash/extend');\n\nvar _extend3 = _interopRequireDefault(_extend2);\n\nexports.extendArray = extendArray;\nexports.combineHandlers = combineHandlers;\nexports.getPropertiesByEnding = getPropertiesByEnding;\nexports.getObjectWherePropertyEndsWith = getObjectWherePropertyEndsWith;\nexports.composeReducer = composeReducer;\nexports.composeReducers = composeReducers;\nexports.getKeysForObjects = getKeysForObjects;\nexports.isKeyGriddleHook = isKeyGriddleHook;\nexports.removeHooksFromObject = removeHooksFromObject;\nexports.removeKeyNamePartFromObject = removeKeyNamePartFromObject;\nexports.getBeforeHooksFromObject = getBeforeHooksFromObject;\nexports.getBeforeReduceHooksFromObject = getBeforeReduceHooksFromObject;\nexports.getAfterHooksFromObject = getAfterHooksFromObject;\nexports.getAfterReduceHooksFromObject = getAfterReduceHooksFromObject;\nexports.composeReducerObjects = composeReducerObjects;\nexports.callReducerWithBeforeAfterPipe = callReducerWithBeforeAfterPipe;\nexports.buildGriddleReducer = buildGriddleReducer;\nexports.getReducersByWordEnding = getReducersByWordEnding;\nexports.wrapMethodsByWordEnding = wrapMethodsByWordEnding;\nexports.combineAndEnhanceComponents = combineAndEnhanceComponents;\nexports.combineAndEnhanceContainers = combineAndEnhanceContainers;\nexports.combineAndWrapWithContainerComponents = combineAndWrapWithContainerComponents;\nexports.buildGriddleComponents = buildGriddleComponents;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** Extends an array rather than known list of objects */\n//TODO: Look at using object.assign\n\n\nfunction extendArray(objects) {\n  //return an empty object if we don't have anything to combine\n  if (!objects) {\n    return {};\n  } //add empty object to the beginning for Object.extend\n\n\n  objects.unshift({}); //Buid the combined object\n\n  var combinedObject = _extend3.default.apply(this, objects); //TODO: why are we doing this? is it necessary\n\n\n  objects.shift(); //return the combined object\n\n  return combinedObject;\n}\n\nfunction combineHandlers(functionArray) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    functionArray.forEach(function (func) {\n      return !!func && func.apply(undefined, args);\n    });\n  };\n} //from MDN\n\n\nif (!String.prototype.endsWith) {\n  String.prototype.endsWith = function (searchString, position) {\n    var subjectString = this.toString();\n\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n\n    position -= searchString.length;\n    var lastIndex = subjectString.indexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  };\n}\n/**\n * Finds properties on an object that end in specified word\n * @param {string} ending - The string that properties should be found ending with\n * @param {Object} object - The object to find keys on\n */\n\n\nfunction getPropertiesByEnding(ending, object) {\n  return Object.keys(object).filter(function (name) {\n    return name.endsWith(ending);\n  });\n}\n/** Creates a new object containing only properties that end with specified ending\n * @param {string} ending - The string that properties should be found ending with\n * @param {Object} object - The object to find keys on\n */\n\n\nfunction getObjectWherePropertyEndsWith(ending, object) {\n  var keys = getPropertiesByEnding(ending, object);\n  return (0, _pick3.default)(object, keys);\n}\n/** Creates a new reducer by taking the output of the first reducer as state to the second\n * @param {Object} currentReducer - reducerMethod (state, action) to that we want to run as the state parameter for second reducer\n * @param {Object} previousReducer - reducerMethod (state, action) to run second\n */\n\n\nfunction composeReducer(nextReducer, previousReducer) {\n  // compose the reducers when both parameters are functions\n  if (typeof nextReducer === 'function' && typeof previousReducer === 'function') {\n    return function (state, action) {\n      return previousReducer(nextReducer(state, action), action);\n    };\n  } // return the nextReducer\n\n\n  return nextReducer;\n}\n/** Creates a composed reducer method from an array of reducer methods\n * @param {Object <array>} reducers - An array of reducer methods to compose\n */\n\n\nfunction composeReducers(reducers) {\n  // flip the array (since we want to apply from left-to-right and compose each reducer\n  return reducers.reverse().reduce(function (previous, next) {\n    return composeReducer(next, previous);\n  }, {});\n}\n/** Obtains all the unique keys between an array of objects\n * @param {Object <array>} objects - An array of objects\n */\n\n\nfunction getKeysForObjects(objects) {\n  return (0, _uniq3.default)((0, _flattenDeep3.default)(objects.map(function (o) {\n    return Object.keys(o);\n  })));\n}\n/** Determines if a given key is a Griddle hook reducer\n * @param {string} key - the key to check if it refers to a Griddle hook\n */\n\n\nfunction isKeyGriddleHook(key) {\n  return key === 'BEFORE_REDUCE' || key === 'AFTER_REDUCE' || key.endsWith('AFTER') || key.endsWith('BEFORE');\n}\n/** Removes Griddle hooks from a reducer object\n * @param {Object} reducerObject - The reducer object to remove hooks from\n */\n\n\nfunction removeHooksFromObject(reducerObject) {\n  return (0, _pickBy3.default)(reducerObject, function (value, key) {\n    if (isKeyGriddleHook(key)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n/** Removes a given string from any key on the object that contains that string\n * @param {Object} reducer object - the reducer object to update keys on\n * @param {string} keyString - the string to remove from all keys\n*/\n\n\nfunction removeKeyNamePartFromObject(reducerObject, keyString) {\n  return Object.keys(reducerObject).reduce(function (previous, current) {\n    previous[current.replace(keyString, '')] = reducerObject[current];\n    return previous;\n  }, {});\n}\n/** Gets an object that consists of only the _BEFORE hooks. _BEFORE will be removed from the key.\n * @param {Object} reducerObject - the reducer to get the _BEFORE hooks from\n */\n\n\nfunction getBeforeHooksFromObject(reducerObject) {\n  return removeKeyNamePartFromObject((0, _pickBy3.default)(reducerObject, function (value, key) {\n    return key.endsWith('BEFORE');\n  }), '_BEFORE');\n}\n/** Gets an object that consists of only the BEFORE_REDUCE hooks.\n * @param {Object} reducerObject - the reducer to get the BEFORE_REDUCE hooks from\n */\n\n\nfunction getBeforeReduceHooksFromObject(reducerObject) {\n  return (0, _pickBy3.default)(reducerObject, function (value, key) {\n    return key === 'BEFORE_REDUCE';\n  });\n}\n/** Gets an object that conists of only the _AFTER hooks. _AFTER will be removed from the key\n * @param {Object} reducerObject - the reducer to get the _AFTER hooks from\n */\n\n\nfunction getAfterHooksFromObject(reducerObject) {\n  return removeKeyNamePartFromObject((0, _pickBy3.default)(reducerObject, function (value, key) {\n    return key.endsWith('AFTER');\n  }), '_AFTER');\n}\n/** Gets an object that conists of only the AFTER_REDUCE hooks.\n * @param {Object} reducerObject - the reducer to get the AFTER_REDUCE hooks from\n */\n\n\nfunction getAfterReduceHooksFromObject(reducerObject) {\n  return (0, _pickBy3.default)(reducerObject, function (value, key) {\n    return key === 'AFTER_REDUCE';\n  });\n}\n/** Combines the given reducer objects left to right\n * @param {Object <array>} reducerObjects - An array containing objects consisting of reducer methods as properties\n */\n\n\nfunction composeReducerObjects(reducerObjects) {\n  if (reducerObjects.length < 1) return null;\n  return reducerObjects.reverse().reduce(function (previous, next) {\n    // if we don't have any reducers in previous object continue with next\n    if (previous === null) {\n      return next;\n    } //mutate the previous object by composing the reducer methods\n\n\n    for (var key in next) {\n      previous[key] = composeReducer(next[key], previous[key]);\n    }\n\n    return previous;\n  }, null);\n}\n/** Builds a new reducer that composes hooks and extends standard reducers between reducerObjects\n * @param {Object <array>} reducers - An array of reducerObjects\n * Note: this used to be exported, but the same properties are available from buildGriddleReducer.\n * TODO: This method should be broken down a bit -- it's doing too much currently\n */\n\n\nfunction buildGriddleReducerObject(reducerObjects) {\n  var reducerMethodsWithoutHooks = [];\n  var beforeHooks = [];\n  var afterHooks = [];\n  var beforeReduceAll = [];\n  var afterReduceAll = [];\n\n  if (reducerObjects.length > 0) {\n    // remove the hooks and extend the object\n    for (var key in reducerObjects) {\n      var reducer = reducerObjects[key];\n      reducerMethodsWithoutHooks.push(removeHooksFromObject(reducer));\n      beforeHooks.push(getBeforeHooksFromObject(reducer));\n      afterHooks.push(getAfterHooksFromObject(reducer));\n      beforeReduceAll.push(getBeforeReduceHooksFromObject(reducer));\n      afterReduceAll.push(getAfterReduceHooksFromObject(reducer));\n    }\n  }\n\n  var composedBeforeHooks = composeReducerObjects(beforeHooks);\n  var composedAfterHooks = composeReducerObjects(afterHooks);\n  var composedBeforeReduceAll = composeReducerObjects(beforeReduceAll);\n  var composedAfterReduceAll = composeReducerObjects(afterReduceAll); // combine the reducers without hooks\n\n  var combinedReducer = extendArray(reducerMethodsWithoutHooks);\n  var composed = composeReducerObjects([composedBeforeReduceAll, composedBeforeHooks, combinedReducer, composedAfterHooks, composedAfterReduceAll]);\n  return composed;\n}\n/** Builds a composed method containing the before / after reduce calls\n * @param {Object} reduceObject - The reducer that contains the composed reducer methods\n * @param {Object} state - The store state\n * @param {object} action - The action payload information\n*/\n\n\nfunction callReducerWithBeforeAfterPipe(reducerObject, state, action) {\n  var noop = function noop(passThroughState) {\n    return passThroughState;\n  };\n\n  var before = reducerObject.hasOwnProperty('BEFORE_REDUCE') ? reducerObject.BEFORE_REDUCE : noop;\n  var after = reducerObject.hasOwnProperty('AFTER_REDUCE') ? reducerObject.AFTER_REDUCE : noop;\n  var call = action.type && reducerObject[action.type] && reducerObject[action.type] || reducerObject.GRIDDLE_INITIALIZED || noop;\n\n  var partialCall = function (partialAction) {\n    return function (partialState) {\n      return call(partialState, partialAction);\n    };\n  }(action);\n\n  var method = (0, _flow3.default)([before, partialCall, after]);\n  return method(state);\n}\n/** Builds a griddleReducer function from a series of reducerObjects\n * @param {Object <array>} reducers - An array of reducerObjects\n*/\n\n\nfunction buildGriddleReducer(reducerObjects) {\n  var reducerObject = buildGriddleReducerObject(reducerObjects);\n\n  var reducer = function reducer(state, action) {\n    return callReducerWithBeforeAfterPipe(reducerObject, state, action);\n  };\n\n  Object.assign(reducer, reducerObject);\n  return reducer;\n}\n/** Gets all reducers by a specific wordEnding\n * @param {array <Object>} reducers - An array of reducer objects\n * @param {string} ending - the wordEnding for the reducer name\n */\n\n\nfunction getReducersByWordEnding(reducers, ending) {\n  return reducers.reduce(function (previous, current) {\n    var keys = Object.keys(current).filter(function (name) {\n      return name.endsWith(ending);\n    });\n    var reducer = pick(current, keys); //TODO: clean this up it's a bit hacky\n\n    for (var key in current) {\n      if (!key.endsWith(ending)) {\n        continue;\n      }\n\n      var keyWithoutEnding = key.replace('_' + ending, \"\"); //make a new method that pipes output of previous into state of current\n      //this is to allow chaining these\n\n      var hasPrevious = previous.hasOwnProperty(keyWithoutEnding) && typeof previous[keyWithoutEnding] === 'function';\n      var previousReducer = hasPrevious ? previous[keyWithoutEnding] : undefined;\n      var currentReducer = reducer[key];\n      reducer[keyWithoutEnding] = wrapReducer(currentReducer, previousReducer);\n    } //override anything in previous (since this now calls previous to make sure we have helpers from both);\n\n\n    return extend(previous, reducer);\n  }, {});\n}\n/** Wraps all methods in another method by name and word ending\n  * @param {array<Object>} componentObjectArray - An array of component objects\n  * @param {string} ending - the word ending to determine what is a enhancer method\n  * @param {string} keyReplaceString - the word ending to apply when replacing the 'ending' parameter. Defaults to ''\n*/\n\n\nfunction wrapMethodsByWordEnding(componentArray, wordEnding) {\n  var keyReplaceString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return componentArray.reduce(function (previous, current) {\n    var newObject = {};\n\n    for (var key in current) {\n      var keyWithoutEnhancer = key.replace(wordEnding, keyReplaceString);\n\n      if (key.endsWith(wordEnding) && (previous.hasOwnProperty(keyWithoutEnhancer) || current.hasOwnProperty(keyWithoutEnhancer))) {\n        // Determine if we are working with an HoC that wraps another HoC\n        newObject[keyWithoutEnhancer] = keyWithoutEnhancer.endsWith('Container') || keyWithoutEnhancer.endsWith('Enhancer') ? // If we are enhancing a container or enhancer flow this stuff since it's likely an HoC\n        (0, _flowRight3.default)(current[key], current[keyWithoutEnhancer] || previous[keyWithoutEnhancer]) : // Wrap the current component in the Enhancer or container\n        current[key](current[keyWithoutEnhancer] || previous[keyWithoutEnhancer]);\n      }\n    }\n\n    return (0, _pickBy3.default)(Object.assign(previous, current, newObject), function (v, k) {\n      return !k.endsWith(wordEnding);\n    });\n  }, {});\n}\n/** Gets a new components object with component per component name\n * @param {array<Object>} componentObjectArray - An array of component objects\n*/\n\n\nfunction combineAndEnhanceComponents(componentArray) {\n  return wrapMethodsByWordEnding(componentArray, 'Enhancer');\n}\n\nfunction combineAndEnhanceContainers(componentArray) {\n  return wrapMethodsByWordEnding(componentArray, 'ContainerEnhancer', 'Container');\n}\n/** Gets a new component object with containers wrapping standard components\n  (this is the same as enhance but just applying different naming conventions)\n * @param {array<Object>} componentObjectArray - An array of component objects\n*/\n\n\nfunction combineAndWrapWithContainerComponents(componentArray) {\n  return wrapMethodsByWordEnding(componentArray, 'Container');\n}\n/** Wraps components in their containers and enhancers\n * @param {array<Object>} componentObjectArray - An array of component objects\n*/\n\n\nfunction buildGriddleComponents(componentArray) {\n  //enhance the containers\n  var withEnhancedContainers = combineAndEnhanceContainers(componentArray); //enhance the components\n\n  var withEnhancedComponents = combineAndEnhanceComponents([withEnhancedContainers]); //wrap the components with the container\n\n  var withWrappedComponents = combineAndWrapWithContainerComponents([withEnhancedComponents]);\n  return withWrappedComponents;\n}","map":null,"metadata":{},"sourceType":"script"}