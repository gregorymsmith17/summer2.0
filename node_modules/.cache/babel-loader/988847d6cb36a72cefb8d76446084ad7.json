{"ast":null,"code":"import _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/customCellEdit.jsx\";\nvar currencies = ['USD', 'GBP', 'EUR'];\nvar regions = ['North', 'South', 'East', 'West'];\nvar cellEditProp = {\n  mode: 'click'\n};\n\nvar NameEditor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NameEditor, _React$Component);\n\n  function NameEditor(props) {\n    var _this;\n\n    _classCallCheck(this, NameEditor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NameEditor).call(this, props));\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n\n      _this.props.onUpdate(_this.props.defaultValue);\n    };\n\n    _this.updateData = _this.updateData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      name: props.defaultValue,\n      open: true\n    };\n    return _this;\n  }\n\n  _createClass(NameEditor, [{\n    key: \"focus\",\n    value: function focus() {\n      this.refs.inputRef.focus();\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      this.props.onUpdate(this.state.name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fadeIn = this.state.open ? 'in' : '';\n      var display = this.state.open ? 'block' : 'none';\n      return React.createElement(\"div\", {\n        className: \"modal fade \".concat(fadeIn),\n        id: \"myModal\",\n        role: \"dialog\",\n        style: {\n          display: display\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: \"inputRef\",\n        className: (this.props.editorClass || '') + ' form-control editor edit-text',\n        style: {\n          display: 'inline',\n          width: '50%'\n        },\n        type: \"text\",\n        value: this.state.name,\n        onChange: function onChange(e) {\n          _this2.setState({\n            name: e.currentTarget.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: this.updateData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Save\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-default\",\n        onClick: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Close\")))));\n    }\n  }]);\n\n  return NameEditor;\n}(React.Component);\n\nvar PriceEditor =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(PriceEditor, _React$Component2);\n\n  function PriceEditor(props) {\n    var _this3;\n\n    _classCallCheck(this, PriceEditor);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PriceEditor).call(this, props));\n    _this3.updateData = _this3.updateData.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.state = {\n      amount: props.defaultValue.amount,\n      currency: props.defaultValue.currency\n    };\n    return _this3;\n  }\n\n  _createClass(PriceEditor, [{\n    key: \"focus\",\n    value: function focus() {\n      this.refs.inputRef.focus();\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      this.props.onUpdate({\n        amount: this.state.amount,\n        currency: this.state.currency\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: \"inputRef\",\n        className: (this.props.editorClass || '') + ' form-control editor edit-text',\n        style: {\n          display: 'inline',\n          width: '50%'\n        },\n        type: \"text\",\n        value: this.state.amount,\n        onKeyDown: this.props.onKeyDown,\n        onChange: function onChange(ev) {\n          _this4.setState({\n            amount: parseInt(ev.currentTarget.value, 10)\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        value: this.state.currency,\n        onKeyDown: this.props.onKeyDown,\n        onChange: function onChange(ev) {\n          _this4.setState({\n            currency: ev.currentTarget.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, currencies.map(function (currency) {\n        return React.createElement(\"option\", {\n          key: currency,\n          value: currency,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, currency);\n      })), React.createElement(\"button\", {\n        className: \"btn btn-info btn-xs textarea-save-btn\",\n        onClick: this.updateData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"save\"));\n    }\n  }]);\n\n  return PriceEditor;\n}(React.Component);\n\nvar RegionsEditor =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(RegionsEditor, _React$Component3);\n\n  function RegionsEditor(props) {\n    var _this5;\n\n    _classCallCheck(this, RegionsEditor);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(RegionsEditor).call(this, props));\n    _this5.updateData = _this5.updateData.bind(_assertThisInitialized(_assertThisInitialized(_this5)));\n    _this5.state = {\n      regions: props.defaultValue\n    };\n    _this5.onToggleRegion = _this5.onToggleRegion.bind(_assertThisInitialized(_assertThisInitialized(_this5)));\n    return _this5;\n  }\n\n  _createClass(RegionsEditor, [{\n    key: \"focus\",\n    value: function focus() {}\n  }, {\n    key: \"onToggleRegion\",\n    value: function onToggleRegion(event) {\n      var region = event.currentTarget.name;\n\n      if (this.state.regions.indexOf(region) < 0) {\n        this.setState({\n          regions: this.state.regions.concat([region])\n        });\n      } else {\n        this.setState({\n          regions: this.state.regions.filter(function (r) {\n            return r !== region;\n          })\n        });\n      }\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      this.props.onUpdate(this.state.regions);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var regionCheckBoxes = regions.map(function (region) {\n        return React.createElement(\"span\", {\n          key: \"span-\".concat(region),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          key: region,\n          name: region,\n          checked: _this6.state.regions.indexOf(region) > -1,\n          onKeyDown: _this6.props.onKeyDown,\n          onChange: _this6.onToggleRegion,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          key: \"label-\".concat(region),\n          htmlFor: region,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, region));\n      });\n      return React.createElement(\"span\", {\n        ref: \"inputRef\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, regionCheckBoxes, React.createElement(\"button\", {\n        className: \"btn btn-info btn-xs textarea-save-btn\",\n        onClick: this.updateData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"save\"));\n    }\n  }]);\n\n  return RegionsEditor;\n}(React.Component);\n\nfunction priceFormatter(cell, row) {\n  return \"<i class='glyphicon glyphicon-\".concat(cell.currency.toLowerCase(), \"'></i> \").concat(cell.amount);\n}\n\nvar regionsFormatter = function regionsFormatter(cell, row) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, (cell || []).join(','));\n};\n/*\n  The getElement function take two arguments,\n  1. onUpdate: if you want to apply the modified data, call this function\n  2. props: contain customEditorParameters, whole row data, defaultValue and attrs\n*/\n\n\nvar createNameEditor = function createNameEditor(onUpdate, props) {\n  return React.createElement(NameEditor, Object.assign({\n    onUpdate: onUpdate\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }));\n};\n\nvar createPriceEditor = function createPriceEditor(onUpdate, props) {\n  return React.createElement(PriceEditor, Object.assign({\n    onUpdate: onUpdate\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }));\n};\n\nvar createRegionsEditor = function createRegionsEditor(onUpdate, props) {\n  return React.createElement(RegionsEditor, Object.assign({\n    onUpdate: onUpdate\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }));\n};\n\nvar CustomCellEditTable =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(CustomCellEditTable, _React$Component4);\n\n  function CustomCellEditTable() {\n    _classCallCheck(this, CustomCellEditTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomCellEditTable).apply(this, arguments));\n  }\n\n  _createClass(CustomCellEditTable, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(BootstrapTable, {\n        data: products,\n        cellEdit: cellEditProp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"id\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Product ID\"), React.createElement(TableHeaderColumn, {\n        dataField: \"name\",\n        customEditor: {\n          getElement: createNameEditor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Product Name\"), React.createElement(TableHeaderColumn, {\n        dataField: \"price\",\n        dataFormat: priceFormatter,\n        customEditor: {\n          getElement: createPriceEditor,\n          customEditorParameters: {\n            currencies: currencies\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Product Price\"), React.createElement(TableHeaderColumn, {\n        dataField: \"regions\",\n        dataFormat: regionsFormatter,\n        customEditor: {\n          getElement: createRegionsEditor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Regions\"));\n    }\n  }]);\n\n  return CustomCellEditTable;\n}(React.Component);\n\nexport { CustomCellEditTable as default };","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/customCellEdit.jsx"],"names":["currencies","regions","cellEditProp","mode","NameEditor","props","close","setState","open","onUpdate","defaultValue","updateData","bind","state","name","refs","inputRef","focus","fadeIn","display","editorClass","width","e","currentTarget","value","React","Component","PriceEditor","amount","currency","onKeyDown","ev","parseInt","map","RegionsEditor","onToggleRegion","event","region","indexOf","concat","filter","r","regionCheckBoxes","priceFormatter","cell","row","toLowerCase","regionsFormatter","join","createNameEditor","createPriceEditor","createRegionsEditor","CustomCellEditTable","products","getElement","customEditorParameters"],"mappings":"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","sourcesContent":["const currencies = [ 'USD', 'GBP', 'EUR' ];\nconst regions = [ 'North', 'South', 'East', 'West' ];\n\nconst cellEditProp = {\n  mode: 'click'\n};\n\nclass NameEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateData = this.updateData.bind(this);\n    this.state = {\n      name: props.defaultValue,\n      open: true\n    };\n  }\n  focus() {\n    this.refs.inputRef.focus();\n  }\n  updateData() {\n    this.props.onUpdate(this.state.name);\n  }\n  close = () => {\n    this.setState({ open: false });\n    this.props.onUpdate(this.props.defaultValue);\n  }\n  render() {\n    const fadeIn = this.state.open ? 'in' : '';\n    const display = this.state.open ? 'block' : 'none';\n    return (\n      <div className={ `modal fade ${fadeIn}` } id='myModal' role='dialog' style={ { display } }>\n        <div className='modal-dialog'>\n          <div className='modal-content'>\n            <div className='modal-body'>\n              <input\n                ref='inputRef'\n                className={ ( this.props.editorClass || '') + ' form-control editor edit-text' }\n                style={ { display: 'inline', width: '50%' } }\n                type='text'\n                value={ this.state.name }\n                onChange={ e => { this.setState({ name: e.currentTarget.value }); } } />\n            </div>\n            <div className='modal-footer'>\n              <button type='button' className='btn btn-primary' onClick={ this.updateData }>Save</button>\n              <button type='button' className='btn btn-default' onClick={ this.close }>Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass PriceEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateData = this.updateData.bind(this);\n    this.state = { amount: props.defaultValue.amount, currency: props.defaultValue.currency };\n  }\n  focus() {\n    this.refs.inputRef.focus();\n  }\n  updateData() {\n    this.props.onUpdate({ amount: this.state.amount, currency: this.state.currency });\n  }\n  render() {\n    return (\n      <span>\n        <input\n          ref='inputRef'\n          className={ ( this.props.editorClass || '') + ' form-control editor edit-text' }\n          style={ { display: 'inline', width: '50%' } }\n          type='text'\n          value={ this.state.amount }\n          onKeyDown={ this.props.onKeyDown }\n          onChange={ (ev) => { this.setState({ amount: parseInt(ev.currentTarget.value, 10) }); } } />\n        <select\n          value={ this.state.currency }\n          onKeyDown={ this.props.onKeyDown }\n          onChange={ (ev) => { this.setState({ currency: ev.currentTarget.value }); } } >\n          { currencies.map(currency => (<option key={ currency } value={ currency }>{ currency }</option>)) }\n        </select>\n        <button\n          className='btn btn-info btn-xs textarea-save-btn'\n          onClick={ this.updateData }>\n          save\n        </button>\n      </span>\n    );\n  }\n}\n\nclass RegionsEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateData = this.updateData.bind(this);\n    this.state = { regions: props.defaultValue };\n    this.onToggleRegion = this.onToggleRegion.bind(this);\n  }\n  focus() {\n  }\n  onToggleRegion(event) {\n    const region = event.currentTarget.name;\n    if (this.state.regions.indexOf(region) < 0) {\n      this.setState({ regions: this.state.regions.concat([ region ]) });\n    } else {\n      this.setState({ regions: this.state.regions.filter(r => r !== region) });\n    }\n  }\n  updateData() {\n    this.props.onUpdate(this.state.regions);\n  }\n  render() {\n    const regionCheckBoxes = regions.map(region => (\n      <span key={ `span-${region}` }>\n        <input\n          type='checkbox'\n          key={ region }\n          name={ region }\n          checked={ this.state.regions.indexOf(region) > -1 }\n          onKeyDown={ this.props.onKeyDown }\n          onChange={ this.onToggleRegion } />\n        <label key={ `label-${region}` } htmlFor={ region }>{ region }</label>\n      </span>\n    ));\n    return (\n      <span ref='inputRef'>\n        { regionCheckBoxes }\n        <button\n          className='btn btn-info btn-xs textarea-save-btn'\n          onClick={ this.updateData }>\n          save\n        </button>\n      </span>\n    );\n  }\n}\n\nfunction priceFormatter(cell, row) {\n  return `<i class='glyphicon glyphicon-${cell.currency.toLowerCase()}'></i> ${cell.amount}`;\n}\n\nconst regionsFormatter = (cell, row) => (<span>{ (cell || []).join(',') }</span>);\n\n/*\n  The getElement function take two arguments,\n  1. onUpdate: if you want to apply the modified data, call this function\n  2. props: contain customEditorParameters, whole row data, defaultValue and attrs\n*/\nconst createNameEditor = (onUpdate, props) => (<NameEditor onUpdate={ onUpdate } {...props}/>);\nconst createPriceEditor = (onUpdate, props) => (<PriceEditor onUpdate={ onUpdate } {...props}/>);\nconst createRegionsEditor = (onUpdate, props) => (<RegionsEditor onUpdate={ onUpdate } {...props}/>);\n\nexport default class CustomCellEditTable extends React.Component {\n  render() {\n    return (\n      <BootstrapTable data={ products } cellEdit={ cellEditProp }>\n          <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>\n          <TableHeaderColumn\n            dataField='name'\n            customEditor={ { getElement: createNameEditor } }>\n            Product Name\n          </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField='price'\n            dataFormat={ priceFormatter }\n            customEditor={ { getElement: createPriceEditor, customEditorParameters: { currencies: currencies } } }>\n            Product Price\n          </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField='regions'\n            dataFormat={ regionsFormatter }\n            customEditor={ { getElement: createRegionsEditor } }>\n            Regions\n          </TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}