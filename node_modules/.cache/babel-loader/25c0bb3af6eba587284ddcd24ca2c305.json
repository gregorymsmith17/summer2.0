{"ast":null,"code":"import _objectSpread from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/Card.js\";\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport flow from 'lodash/flow';\nvar style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  margin: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          card = _this$props.card,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var opacity = isDragging ? 0 : 1;\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        style: _objectSpread({}, style, {\n          opacity: opacity\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, card.text)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      index: props.index,\n      listId: props.listId,\n      card: props.card\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var item = monitor.getItem();\n    var dropResult = monitor.getDropResult();\n\n    if (dropResult && dropResult.listId !== item.listId) {\n      props.removeCard(item.index);\n    }\n  }\n};\nvar cardTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n    var sourceListId = monitor.getItem().listId; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Determine rectangle on screen\n\n\n    var hoverBoundingRect = findDOMNode(component).getBoundingClientRect(); // Get vertical middle\n\n    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    if (props.listId === sourceListId) {\n      props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      monitor.getItem().index = hoverIndex;\n    }\n  }\n};\nexport default flow(DropTarget(\"CARD\", cardTarget, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n}), DragSource(\"CARD\", cardSource, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}))(Card);","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/Card.js"],"names":["React","Component","findDOMNode","DragSource","DropTarget","flow","style","border","padding","margin","backgroundColor","cursor","Card","props","card","isDragging","connectDragSource","connectDropTarget","opacity","text","cardSource","beginDrag","index","listId","endDrag","monitor","item","getItem","dropResult","getDropResult","removeCard","cardTarget","hover","component","dragIndex","hoverIndex","sourceListId","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveCard","connect","dropTarget","dragSource"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport flow from 'lodash/flow';\n\nconst style = {\n\tborder: '1px dashed gray',\n\tpadding: '0.5rem 1rem',\n\tmargin: '.5rem',\n\tbackgroundColor: 'white',\n\tcursor: 'move'\n};\n\nclass Card extends Component {\n\n\trender() {\n\t\tconst { card, isDragging, connectDragSource, connectDropTarget } = this.props;\n\t\tconst opacity = isDragging ? 0 : 1;\n\n\t\treturn connectDragSource(connectDropTarget(\n\t\t\t<div style={{ ...style, opacity }}>\n\t\t\t\t{card.text}\n\t\t\t</div>\n\t\t));\n\t}\n}\n\nconst cardSource = {\n\n\tbeginDrag(props) {\n\t\treturn {\n\t\t\tindex: props.index,\n\t\t\tlistId: props.listId,\n\t\t\tcard: props.card\n\t\t};\n\t},\n\n\tendDrag(props, monitor) {\n\t\tconst item = monitor.getItem();\n\t\tconst dropResult = monitor.getDropResult();\n\n\t\tif ( dropResult && dropResult.listId !== item.listId ) {\n\t\t\tprops.removeCard(item.index);\n\t\t}\n\t}\n};\n\nconst cardTarget = {\n\n\thover(props, monitor, component) {\n\t\tconst dragIndex = monitor.getItem().index;\n\t\tconst hoverIndex = props.index;\n\t\tconst sourceListId = monitor.getItem().listId;\n\n\t\t// Don't replace items with themselves\n\t\tif (dragIndex === hoverIndex) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine rectangle on screen\n\t\tconst hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n\n\t\t// Get vertical middle\n\t\tconst hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n\t\t// Determine mouse position\n\t\tconst clientOffset = monitor.getClientOffset();\n\n\t\t// Get pixels to the top\n\t\tconst hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n\t\t// Only perform the move when the mouse has crossed half of the items height\n\t\t// When dragging downwards, only move when the cursor is below 50%\n\t\t// When dragging upwards, only move when the cursor is above 50%\n\n\t\t// Dragging downwards\n\t\tif (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Dragging upwards\n\t\tif (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Time to actually perform the action\n\t\tif ( props.listId === sourceListId ) {\n\t\t\tprops.moveCard(dragIndex, hoverIndex);\n\n\t\t\t// Note: we're mutating the monitor item here!\n\t\t\t// Generally it's better to avoid mutations,\n\t\t\t// but it's good here for the sake of performance\n\t\t\t// to avoid expensive index searches.\n\t\t\tmonitor.getItem().index = hoverIndex;\n\t\t}\n\t}\n};\n\nexport default flow(\n\tDropTarget(\"CARD\", cardTarget, connect => ({\n\t\tconnectDropTarget: connect.dropTarget()\n\t})),\n\tDragSource(\"CARD\", cardSource, (connect, monitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging()\n\t}))\n)(Card);\n"]},"metadata":{},"sourceType":"module"}