{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/dashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Navbar, Nav, Grid, Jumbotron, Row, Col, NavItem, Button, Modal, Panel } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport FileSaver from 'file-saver';\nimport * as jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport fileDownload from \"js-file-download\";\nimport Request from 'superagent';\nimport firebase from 'firebase';\nimport { fire } from '../fire';\nimport { BootstrapTable, BootstrapButton, TableHeaderColumn } from 'react-bootstrap-table';\nimport { TiArrowSortedDown, TiArrowSortedUp, TiPencil, TiTrash } from \"react-icons/ti\";\nimport { LineChart, ReferenceArea, AreaChart, Brush, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\nvar data = [{\n  name: 'Page A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'Page B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'Page C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'Page D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'Page E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'Page F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'Page G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.imageFormatter = function (cell, row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        displayColorPicker: !_this.state.displayColorPicker\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        displayColorPicker: false\n      });\n    };\n\n    _this.tempColorChange = function (color) {\n      console.log(_this.state.color);\n      _this.removeAuthListener = fire.auth().onAuthStateChanged(function (user) {\n        var samplesRef = fire.database().ref(\"colors/\".concat(user.uid));\n        var orderID = fire.database().ref(\"/colors/\".concat(user.uid, \"/\").concat(orderID));\n        var sample = {\n          tempColor: color.hex\n        };\n        samplesRef.set(sample);\n\n        _this.setState({\n          tempColor: color.hex\n        });\n      });\n    };\n\n    _this.state = {\n      //The data that goes into the table showing weather data\n      weatherData: [],\n      iconData: [],\n      //this is the object array for the table\n      samples: [],\n      orders: [],\n      orders2: [],\n      dataList: [],\n      filter: \"\",\n      blobUrl: null,\n      id: '',\n      key: 1,\n      currentCity: '',\n      currentTemp: '',\n      currentIcon: '',\n      currentDescription: '',\n      currentHumidity: '',\n      //checkbox status\n      checkboxState: true,\n      checkboxState1: true,\n      checkboxStatenitrogen: true,\n      checkboxStatephosphorus: true,\n      checkboxStatetds: true,\n      checkboxStatepH: true,\n      checkboxStatetss: true,\n      checkboxStatesalinity: true,\n      checkboxStateconductivity: true,\n      checkboxStatehardness: true,\n      checkboxStateturbidity: true,\n      //these are for the graphs\n      tempPlot: 'temp',\n      doPlot: 'do',\n      conductivityPlot: 'conductivity',\n      tdsPlot: 'tds',\n      salinityPlot: 'salinity',\n      pHPlot: 'pH',\n      turbidityPlot: 'turbidity',\n      nitrogenPlot: 'nitrogen',\n      phosphorusPlot: 'phosphorus',\n      totalHardnessPlot: 'totalHardness',\n      tssPlot: 'tss'\n    };\n    return _this;\n  } //async allows await to be used for API calls.  Without ASYNC an error will be called saying that await is a reserved word.\n  //ComponentDidMount runs over and over again\n\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var weatherData, city, temp, icon, description, humidity, api_callWeather, weatherResponse, symbol;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                weatherData = [];\n                city = '';\n                temp = '';\n                icon = '';\n                description = '';\n                humidity = '';\n                _context.next = 8;\n                return fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\".concat('37.997', \"&lon=\", '-121.71', \"&units=\", 'imperial', \"&appid=\", '30573b68170d7f4400c7ac9c1c671ccf'));\n\n              case 8:\n                api_callWeather = _context.sent;\n                _context.next = 11;\n                return api_callWeather.json();\n\n              case 11:\n                weatherResponse = _context.sent;\n                symbol = weatherResponse.weather[0].icon;\n                console.log(weatherResponse);\n                this.setState({\n                  currentCity: weatherResponse.name,\n                  currentTemp: weatherResponse.main.temp,\n                  currentIcon: 'http://openweathermap.org/img/w/' + weatherResponse.weather[0].icon + '.png',\n                  currentDescription: weatherResponse.weather[0].main,\n                  currentHumidity: weatherResponse.main.humidity\n                });\n                console.log(this.state.currentIcon);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.removeAuthListener = fire.auth().onAuthStateChanged(function (user) {\n        var samplesRef = fire.database().ref(\"monthlySamples/\".concat(user.uid));\n        samplesRef.on('value', function (snapshot) {\n          var dataList = snapshot.val();\n          var filter = [];\n          var orders = snapshot.val();\n          var orders2 = snapshot.val();\n          console.log(orders2);\n          var newState = [];\n          var newState2 = [];\n          var newState3 = [];\n\n          for (var order in orders) {\n            newState.push({\n              id: order,\n              sampleDate: orders[order].sampleDate,\n              sampleTaker: orders[order].sampleTaker,\n              temp: orders[order].temp,\n              do: orders[order].do,\n              conductivity: orders[order].conductivity,\n              tds: orders[order].tds,\n              salinity: orders[order].salinity,\n              pH: orders[order].pH,\n              turbidity: orders[order].turbidity,\n              nitrogen: orders[order].nitrogen,\n              phosphorus: orders[order].phosphorus,\n              totalHardness: orders[order].totalHardness,\n              tss: orders[order].tss,\n              sampleNotes: orders[order].sampleNotes\n            });\n            newState2.push({\n              id: order,\n              sampleDate: orders[order].sampleDate,\n              sampleTaker: orders[order].sampleTaker,\n              temp: orders[order].temp,\n              do: orders[order].do,\n              conductivity: orders[order].conductivity,\n              tds: orders[order].tds,\n              salinity: orders[order].salinity,\n              pH: orders[order].pH,\n              turbidity: orders[order].turbidity,\n              nitrogen: orders[order].nitrogen,\n              phosphorus: orders[order].phosphorus,\n              totalHardness: orders[order].totalHardness,\n              tss: orders[order].tss,\n              sampleNotes: orders[order].sampleNotes\n            });\n          }\n\n          newState2.sort(function (a, b) {\n            if (a.sampleDate === b.sampleDate) {\n              return 0;\n            }\n\n            return a.sampleDate > b.sampleDate ? 1 : -1;\n          });\n          newState.sort(function (a, b) {\n            if (b.sampleDate === a.sampleDate) {\n              return 0;\n            }\n\n            return b.sampleDate > a.sampleDate ? 1 : -1;\n          });\n\n          _this2.setState({\n            orders: newState,\n            orders2: newState2,\n            dataList: newState,\n            color: _this2.state.color\n          });\n        });\n        var colorsRef = fire.database().ref(\"colors/\".concat(user.uid));\n        colorsRef.on('value', function (snapshot) {\n          var colorList = snapshot.val();\n          console.log(colorList);\n\n          _this2.setState({\n            tempColor: snapshot.child('tempColor').val()\n          });\n        });\n      });\n    }\n  }, {\n    key: \"toggleNitrogen\",\n    value: function toggleNitrogen(event) {\n      this.setState({\n        checkboxState: !this.state.checkboxState\n      });\n      var checkboxState = this.state.checkboxState;\n\n      if (checkboxState) {\n        this.setState({\n          nitrogenPlot: ''\n        });\n      } else {\n        this.setState({\n          nitrogenPlot: 'nitrogen'\n        });\n      }\n    }\n  }, {\n    key: \"togglePhosphorus\",\n    value: function togglePhosphorus(event) {\n      this.setState({\n        checkboxStatephosphorus: !this.state.checkboxStatephosphorus\n      });\n      var checkboxState = this.state.checkboxStatephosphorus;\n\n      if (checkboxState) {\n        this.setState({\n          phosphorusPlot: ''\n        });\n      } else {\n        this.setState({\n          phosphorusPlot: 'phosphorus'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTemp\",\n    value: function toggleTemp(event) {\n      this.setState({\n        checkboxStatenitrogen: !this.state.checkboxStatenitrogen\n      });\n      var checkboxState = this.state.checkboxStatenitrogen;\n\n      if (checkboxState) {\n        this.setState({\n          tempPlot: ''\n        });\n      } else {\n        this.setState({\n          tempPlot: 'temp'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTDS\",\n    value: function toggleTDS(event) {\n      this.setState({\n        checkboxStatetds: !this.state.checkboxStatetds\n      });\n      var checkboxState = this.state.checkboxStatetds;\n\n      if (checkboxState) {\n        this.setState({\n          tdsPlot: ''\n        });\n      } else {\n        this.setState({\n          tdsPlot: 'tds'\n        });\n      }\n    }\n  }, {\n    key: \"togglepH\",\n    value: function togglepH(event) {\n      this.setState({\n        checkboxStatepH: !this.state.checkboxStatepH\n      });\n      var checkboxState = this.state.checkboxStatepH;\n\n      if (checkboxState) {\n        this.setState({\n          pHPlot: ''\n        });\n      } else {\n        this.setState({\n          pHPlot: 'pH'\n        });\n      }\n    }\n  }, {\n    key: \"toggletss\",\n    value: function toggletss(event) {\n      this.setState({\n        checkboxStatetss: !this.state.checkboxStatetss\n      });\n      var checkboxState = this.state.checkboxStatetss;\n\n      if (checkboxState) {\n        this.setState({\n          tssPlot: ''\n        });\n      } else {\n        this.setState({\n          tssPlot: 'tss'\n        });\n      }\n    }\n  }, {\n    key: \"togglesalinity\",\n    value: function togglesalinity(event) {\n      this.setState({\n        checkboxStatesalinity: !this.state.checkboxStatesalinity\n      });\n      var checkboxState = this.state.checkboxStatesalinity;\n\n      if (checkboxState) {\n        this.setState({\n          salinityPlot: ''\n        });\n      } else {\n        this.setState({\n          salinityPlot: 'salinity'\n        });\n      }\n    }\n  }, {\n    key: \"toggleHardness\",\n    value: function toggleHardness(event) {\n      this.setState({\n        checkboxStatehardness: !this.state.checkboxStatehardness\n      });\n      var checkboxState = this.state.checkboxStatehardness;\n\n      if (checkboxState) {\n        this.setState({\n          totalHardnessPlot: ''\n        });\n      } else {\n        this.setState({\n          totalHardnessPlot: 'totalHardness'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTurbidity\",\n    value: function toggleTurbidity(event) {\n      this.setState({\n        checkboxStateturbidity: !this.state.checkboxStateturbidity\n      });\n      var checkboxState = this.state.checkboxStateturbidity;\n\n      if (checkboxState) {\n        this.setState({\n          turbidityPlot: ''\n        });\n      } else {\n        this.setState({\n          turbidityPlot: 'turbidity'\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var nitrogenCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggleNitrogen.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, \"Nitrogen\"));\n      var phosphorusCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.togglePhosphorus.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, \"Phosphorus\"));\n      var tempCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggleTemp.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, \"Temperature\"));\n      var tdsCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggleTDS.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, \"TDS\"));\n      var pHCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.togglepH.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, \"pH\"));\n      var tssCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggletss.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, \"TSS\"));\n      var salinityCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.togglesalinity.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \"Salinity\"));\n      var hardnessCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggleHardness.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, \"Total Hardness\"));\n      var turbidityCheckbox = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: \"true\",\n        onClick: this.toggleTurbidity.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }, \"Turbidity\"));\n      var popover = {\n        position: 'absolute',\n        zIndex: '2'\n      };\n      var cover = {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px'\n      };\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 11,\n        sm: 11,\n        md: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, \"Summer Lake\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, \"Homeowners Association\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 4,\n        sm: 4,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, React.createElement(Panel.Title, {\n        style: {\n          textAlign: 'center'\n        },\n        componentClass: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }, \"Weather\")), React.createElement(Panel.Body, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, this.state.currentCity), React.createElement(\"img\", {\n        style: {\n          width: '75px',\n          height: '75px'\n        },\n        src: this.state.currentIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, this.state.currentDescription), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, \"Temperature: \", this.state.currentTemp), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, \"Humidity: \", this.state.currentHumidity))))), React.createElement(Col, {\n        xs: 7,\n        sm: 7,\n        md: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, React.createElement(Panel.Title, {\n        componentClass: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, \"Water Quality\")), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }))))), React.createElement(Row, {\n        style: {\n          paddingTop: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 8,\n        sm: 8,\n        md: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        width: 600,\n        height: 300,\n        data: this.state.orders2,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        dataKey: \"sampleDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }), React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: \"nitrogen\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: \"phosphorus\",\n        stroke: \"#82ca9d\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      })), React.createElement(BootstrapTable, {\n        data: this.state.weatherData,\n        containerStyle: {\n          width: '800px',\n          overflowX: 'scroll'\n        },\n        pagination: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"date\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, \" Date\"), React.createElement(TableHeaderColumn, {\n        dataField: \"temp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, \"Temp\"), React.createElement(TableHeaderColumn, {\n        dataField: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, \"Description\"), React.createElement(TableHeaderColumn, {\n        dataField: \"image\",\n        dataFormat: this.imageFormatter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, \"Product Image\")))))));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/dashboard.jsx"],"names":["React","Component","Navbar","Nav","Grid","Jumbotron","Row","Col","NavItem","Button","Modal","Panel","Link","ReactDOM","FileSaver","jsPDF","domtoimage","fileDownload","Request","firebase","fire","BootstrapTable","BootstrapButton","TableHeaderColumn","TiArrowSortedDown","TiArrowSortedUp","TiPencil","TiTrash","LineChart","ReferenceArea","AreaChart","Brush","Area","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Label","data","name","uv","pv","amt","Dashboard","props","imageFormatter","cell","row","handleClick","setState","displayColorPicker","state","handleClose","tempColorChange","color","console","log","removeAuthListener","auth","onAuthStateChanged","user","samplesRef","database","ref","uid","orderID","sample","tempColor","hex","set","weatherData","iconData","samples","orders","orders2","dataList","filter","blobUrl","id","key","currentCity","currentTemp","currentIcon","currentDescription","currentHumidity","checkboxState","checkboxState1","checkboxStatenitrogen","checkboxStatephosphorus","checkboxStatetds","checkboxStatepH","checkboxStatetss","checkboxStatesalinity","checkboxStateconductivity","checkboxStatehardness","checkboxStateturbidity","tempPlot","doPlot","conductivityPlot","tdsPlot","salinityPlot","pHPlot","turbidityPlot","nitrogenPlot","phosphorusPlot","totalHardnessPlot","tssPlot","city","temp","icon","description","humidity","fetch","api_callWeather","json","weatherResponse","symbol","weather","main","on","snapshot","val","newState","newState2","newState3","order","push","sampleDate","sampleTaker","do","conductivity","tds","salinity","pH","turbidity","nitrogen","phosphorus","totalHardness","tss","sampleNotes","sort","a","b","colorsRef","colorList","child","event","nitrogenCheckbox","toggleNitrogen","bind","phosphorusCheckbox","togglePhosphorus","tempCheckbox","toggleTemp","tdsCheckbox","toggleTDS","pHCheckbox","togglepH","tssCheckbox","toggletss","salinityCheckbox","togglesalinity","hardnessCheckbox","toggleHardness","turbidityCheckbox","toggleTurbidity","popover","position","zIndex","cover","top","right","bottom","left","textAlign","width","height","paddingTop","r","overflowX"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, Grid, Jumbotron, Row, Col, NavItem, Button, Modal, Panel } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport FileSaver from 'file-saver';\nimport * as jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport fileDownload from \"js-file-download\";\nimport Request from 'superagent';\n\nimport firebase from 'firebase';\nimport { fire } from '../fire';\n\n\nimport {BootstrapTable, BootstrapButton, TableHeaderColumn} from 'react-bootstrap-table';\nimport { TiArrowSortedDown, TiArrowSortedUp, TiPencil, TiTrash } from \"react-icons/ti\";\n\nimport { LineChart, ReferenceArea, AreaChart, Brush, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label} from 'recharts';\n\n\nconst data = [\n      {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n      {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n      {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n      {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n      {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n      {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n      {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n];\n\n\nexport default class Dashboard extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n\n        //The data that goes into the table showing weather data\n        weatherData: [],\n        iconData: [],\n\n        //this is the object array for the table\n        samples: [],\n        orders: [],\n        orders2: [],\n        dataList: [],\n        filter: \"\",\n        blobUrl: null,\n\n        id: '',\n        key: 1,\n\n        currentCity: '',\n        currentTemp: '',\n        currentIcon: '',\n        currentDescription: '',\n        currentHumidity: '',\n\n        //checkbox status\n        checkboxState: true,\n        checkboxState1: true,\n        checkboxStatenitrogen: true,\n        checkboxStatephosphorus: true,\n        checkboxStatetds: true,\n        checkboxStatepH: true,\n        checkboxStatetss: true,\n        checkboxStatesalinity: true,\n        checkboxStateconductivity: true,\n        checkboxStatehardness: true,\n        checkboxStateturbidity: true,\n\n        //these are for the graphs\n        tempPlot: 'temp',\n        doPlot: 'do',\n        conductivityPlot: 'conductivity',\n        tdsPlot: 'tds',\n        salinityPlot: 'salinity',\n        pHPlot: 'pH',\n        turbidityPlot: 'turbidity',\n        nitrogenPlot: 'nitrogen',\n        phosphorusPlot: 'phosphorus',\n        totalHardnessPlot: 'totalHardness',\n        tssPlot: 'tss',\n\n\n\n\n      }\n\n    }\n\n\n\n\n\n\n    //async allows await to be used for API calls.  Without ASYNC an error will be called saying that await is a reserved word.\n\n    //ComponentDidMount runs over and over again\n\n  async componentDidMount() {\n\n    let weatherData = [];\n    let city = '';\n    let temp = '';\n    let icon = '';\n    let description = '';\n    let humidity = '';\n\n    let api_callWeather =  await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${'37.997'}&lon=${'-121.71'}&units=${'imperial'}&appid=${'30573b68170d7f4400c7ac9c1c671ccf'}`);\n\n\n    let weatherResponse = await api_callWeather.json();\n\n    let symbol = weatherResponse.weather[0].icon;\n\n\n    console.log(weatherResponse)\n\n    this.setState({\n      currentCity: weatherResponse.name,\n      currentTemp: weatherResponse.main.temp,\n      currentIcon: 'http://openweathermap.org/img/w/' + weatherResponse.weather[0].icon + '.png',\n\n      currentDescription: weatherResponse.weather[0].main,\n      currentHumidity: weatherResponse.main.humidity,\n\n    })\n\nconsole.log(this.state.currentIcon)\n\n\n\n\n\n  }\n\n  componentWillMount() {\n    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{\n      const samplesRef = fire.database().ref(`monthlySamples/${user.uid}`);\n      samplesRef.on('value', (snapshot) => {\n\n\n        let dataList = snapshot.val();\n        let filter = [];\n        let orders = snapshot.val();\n        let orders2 = snapshot.val();\n        console.log(orders2);\n\n        let newState = [];\n        let newState2 = [];\n        let newState3 = [];\n\n      for (let order in orders) {\n        newState.push({\n          id: order,\n          sampleDate: orders[order].sampleDate,\n          sampleTaker: orders[order].sampleTaker,\n          temp: orders[order].temp,\n          do: orders[order].do,\n          conductivity: orders[order].conductivity,\n          tds: orders[order].tds,\n          salinity: orders[order].salinity,\n          pH: orders[order].pH,\n          turbidity: orders[order].turbidity,\n          nitrogen: orders[order].nitrogen,\n          phosphorus: orders[order].phosphorus,\n          totalHardness: orders[order].totalHardness,\n          tss: orders[order].tss,\n          sampleNotes: orders[order].sampleNotes,\n        });\n        newState2.push({\n          id: order,\n          sampleDate: orders[order].sampleDate,\n          sampleTaker: orders[order].sampleTaker,\n          temp: orders[order].temp,\n          do: orders[order].do,\n          conductivity: orders[order].conductivity,\n          tds: orders[order].tds,\n          salinity: orders[order].salinity,\n          pH: orders[order].pH,\n          turbidity: orders[order].turbidity,\n          nitrogen: orders[order].nitrogen,\n          phosphorus: orders[order].phosphorus,\n          totalHardness: orders[order].totalHardness,\n          tss: orders[order].tss,\n          sampleNotes: orders[order].sampleNotes,\n        });\n\n\n\n\n      }\n\n      newState2.sort(function(a, b) {\n\n        if (a.sampleDate === b.sampleDate) {\n          return 0;\n        }\n        return a.sampleDate > b.sampleDate ? 1 : -1;\n    });\n    newState.sort(function(a, b) {\n\n      if (b.sampleDate === a.sampleDate) {\n        return 0;\n      }\n      return b.sampleDate > a.sampleDate ? 1 : -1;\n  });\n\n\n\n      this.setState({\n        orders: newState,\n        orders2: newState2,\n        dataList: newState,\n        color: this.state.color,\n      });\n\n    });\n    const colorsRef = fire.database().ref(`colors/${user.uid}`);\n\n    colorsRef.on('value', (snapshot) => {\n      let colorList = snapshot.val();\n      console.log(colorList);\n      this.setState({\n        tempColor: snapshot.child('tempColor').val(),\n\n      });\n\n\n    });\n\n  });\n  }\n\n\n\n   imageFormatter = (cell, row) => {\n      return (\n<span><img src={cell} /></span>\n)\n    }\n\n    toggleNitrogen(event) {\n        this.setState({\n          checkboxState: !this.state.checkboxState\n        });\n        const checkboxState = this.state.checkboxState;\n        if (checkboxState) {\n          this.setState({\n            nitrogenPlot: '',\n          })\n        } else {\n          this.setState({\n            nitrogenPlot: 'nitrogen',\n          })\n        }\n      }\n      togglePhosphorus(event) {\n          this.setState({\n            checkboxStatephosphorus: !this.state.checkboxStatephosphorus\n          });\n          const checkboxState = this.state.checkboxStatephosphorus;\n          if (checkboxState) {\n            this.setState({\n              phosphorusPlot: '',\n            })\n          } else {\n            this.setState({\n              phosphorusPlot: 'phosphorus',\n            })\n          }\n        }\n        toggleTemp(event) {\n            this.setState({\n              checkboxStatenitrogen: !this.state.checkboxStatenitrogen\n            });\n            const checkboxState = this.state.checkboxStatenitrogen;\n            if (checkboxState) {\n              this.setState({\n                tempPlot: '',\n              })\n            } else {\n              this.setState({\n                tempPlot: 'temp',\n              })\n            }\n          }\n          toggleTDS(event) {\n              this.setState({\n                checkboxStatetds: !this.state.checkboxStatetds\n              });\n              const checkboxState = this.state.checkboxStatetds;\n              if (checkboxState) {\n                this.setState({\n                  tdsPlot: '',\n                })\n              } else {\n                this.setState({\n                  tdsPlot: 'tds',\n                })\n              }\n            }\n            togglepH(event) {\n                this.setState({\n                  checkboxStatepH: !this.state.checkboxStatepH\n                });\n                const checkboxState = this.state.checkboxStatepH;\n                if (checkboxState) {\n                  this.setState({\n                    pHPlot: '',\n                  })\n                } else {\n                  this.setState({\n                    pHPlot: 'pH',\n                  })\n                }\n              }\n              toggletss(event) {\n                  this.setState({\n                    checkboxStatetss: !this.state.checkboxStatetss\n                  });\n                  const checkboxState = this.state.checkboxStatetss;\n                  if (checkboxState) {\n                    this.setState({\n                      tssPlot: '',\n                    })\n                  } else {\n                    this.setState({\n                      tssPlot: 'tss',\n                    })\n                  }\n                }\n                togglesalinity(event) {\n                    this.setState({\n                      checkboxStatesalinity: !this.state.checkboxStatesalinity\n                    });\n                    const checkboxState = this.state.checkboxStatesalinity;\n                    if (checkboxState) {\n                      this.setState({\n                        salinityPlot: '',\n                      })\n                    } else {\n                      this.setState({\n                        salinityPlot: 'salinity',\n                      })\n                    }\n                  }\n                  toggleHardness(event) {\n                      this.setState({\n                        checkboxStatehardness: !this.state.checkboxStatehardness\n                      });\n                      const checkboxState = this.state.checkboxStatehardness;\n                      if (checkboxState) {\n                        this.setState({\n                          totalHardnessPlot: '',\n                        })\n                      } else {\n                        this.setState({\n                          totalHardnessPlot: 'totalHardness',\n                        })\n                      }\n                    }\n                    toggleTurbidity(event) {\n                        this.setState({\n                          checkboxStateturbidity: !this.state.checkboxStateturbidity\n                        });\n                        const checkboxState = this.state.checkboxStateturbidity;\n                        if (checkboxState) {\n                          this.setState({\n                            turbidityPlot: '',\n                          })\n                        } else {\n                          this.setState({\n                            turbidityPlot: 'turbidity',\n                          })\n                        }\n                      }\n\n                      handleClick = () => {\n                        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n                      };\n\n                      handleClose = () => {\n                        this.setState({ displayColorPicker: false })\n                      };\n\n                      tempColorChange = (color) => {\n\n                          console.log(this.state.color);\n                          this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{\n                          const samplesRef = fire.database().ref(`colors/${user.uid}`);\n                          const orderID = fire.database().ref(`/colors/${user.uid}/${orderID}`);\n                          const sample = {\n                            tempColor: color.hex\n                          }\n                          samplesRef.set(sample);\n                          this.setState({\n                            tempColor: color.hex,\n                           });\n                          });\n                      }\n\n\n\n  render() {\n\n    const nitrogenCheckbox = (\n      <span>\n        <input\n        type=\"checkbox\"\n        defaultChecked='true'\n        onClick={this.toggleNitrogen.bind(this)}\n        />\n      <label>Nitrogen</label>\n      </span>\n    );\n    const phosphorusCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.togglePhosphorus.bind(this)}/>\n      <label>Phosphorus</label>\n      </span>\n    );\n    const tempCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.toggleTemp.bind(this)}/>\n      <label>Temperature</label>\n      </span>\n    );\n    const tdsCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.toggleTDS.bind(this)}/>\n      <label>TDS</label>\n      </span>\n    );\n    const pHCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.togglepH.bind(this)}/>\n      <label>pH</label>\n      </span>\n    );\n    const tssCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.toggletss.bind(this)}/>\n      <label>TSS</label>\n      </span>\n    );\n    const salinityCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.togglesalinity.bind(this)}/>\n      <label>Salinity</label>\n      </span>\n    );\n    const hardnessCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.toggleHardness.bind(this)}/>\n      <label>Total Hardness</label>\n      </span>\n    );\n    const turbidityCheckbox = (\n      <span><input type=\"checkbox\" defaultChecked='true' onClick={this.toggleTurbidity.bind(this)}/>\n      <label>Turbidity</label>\n      </span>\n    );\n    const popover = {\n       position: 'absolute',\n       zIndex: '2',\n     }\n     const cover = {\n       position: 'fixed',\n       top: '0px',\n       right: '0px',\n       bottom: '0px',\n       left: '0px',\n     }\n\n\n\n    return (\n      <Grid>\n        <Row>\n          <Col xs={11} sm={11} md={11} >\n        <Jumbotron>\n          <h1>Summer Lake</h1>\n          <p>\n            Homeowners Association\n          </p>\n\n\n\n\n        </Jumbotron>\n        <hr></hr>\n\n          <Row>\n            <Col xs={4} sm={4} md={4} >\n\n              <div>\n      <Panel bsStyle=\"primary\">\n        <Panel.Heading>\n          <Panel.Title style={{textAlign: 'center'}} componentClass=\"h3\">Weather</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body style={{textAlign: 'center'}}>\n          <h3>{this.state.currentCity}</h3>\n          <img style={{width: '75px', height: '75px'}} src={this.state.currentIcon} />\n          <p>{this.state.currentDescription}</p>\n          <p>Temperature: {this.state.currentTemp}</p>\n          <p>Humidity: {this.state.currentHumidity}</p>\n\n        </Panel.Body>\n      </Panel>\n    </div>\n    </Col>\n    <Col xs={7} sm={7} md={7} >\n\n      <div>\n<Panel bsStyle=\"primary\">\n<Panel.Heading>\n  <Panel.Title componentClass=\"h3\">Water Quality</Panel.Title>\n</Panel.Heading>\n<Panel.Body>\n\n\n\n\n</Panel.Body>\n</Panel>\n</div>\n</Col>\n\n\n\n\n  </Row>\n\n\n\n\n\n\n\n\n<Row style={{paddingTop: \"50px\"}}>\n  <Col xs={8} sm={8} md={8} >\n    <LineChart width={600} height={300} data={this.state.orders2}\n            margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n       <XAxis dataKey=\"sampleDate\"/>\n       <YAxis/>\n       <CartesianGrid strokeDasharray=\"3 3\"/>\n       <Tooltip/>\n       <Legend />\n       <Line type=\"monotone\" dataKey=\"nitrogen\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\n       <Line type=\"monotone\" dataKey=\"phosphorus\" stroke=\"#82ca9d\" />\n      </LineChart>\n\n    <BootstrapTable\n    data={ this.state.weatherData }\n    containerStyle={{width: '800px', overflowX: 'scroll'}}\n    pagination\n    >\n\n    <TableHeaderColumn dataField='date' isKey> Date</TableHeaderColumn>\n    <TableHeaderColumn dataField='temp' >Temp</TableHeaderColumn>\n    <TableHeaderColumn dataField='description' >Description</TableHeaderColumn>\n    <TableHeaderColumn dataField=\"image\" dataFormat={this.imageFormatter}>Product Image</TableHeaderColumn>\n\n\n\n\n    </BootstrapTable>\n\n\n\n\n</Col>\n\n</Row>\n\n\n\n\n\n\n\n        </Col>\n        </Row>\n      </Grid>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}