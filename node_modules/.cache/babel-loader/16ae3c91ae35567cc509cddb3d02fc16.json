{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cellPropertiesSelector = exports.cellPropertiesSelectorFactory = exports.rowPropertiesSelector = exports.rowDataSelector = exports.cellValueSelector = exports.visibleRowCountSelector = exports.visibleRowIdsSelector = exports.columnTitlesSelector = exports.columnIdsSelector = exports.textSelector = exports.isSettingsVisibleSelector = exports.isSettingsEnabledSelector = exports.customHeadingComponentSelector = exports.customComponentSelector = exports.classNamesForComponentSelector = exports.stylesForComponentSelector = exports.iconsForComponentSelector = exports.iconByNameSelector = exports.sortPropertyByIdSelector = exports.hiddenColumnPropertiesSelector = exports.hiddenColumnsSelector = exports.visibleColumnPropertiesSelector = exports.visibleColumnsSelector = exports.metaDataColumnsSelector = exports.sortedColumnPropertiesSelector = exports.allColumnsSelector = exports.sortColumnsSelector = exports.filterSelector = exports.hasNextSelector = exports.maxPageSelector = exports.hasPreviousSelector = exports.renderPropertiesSelector = exports.recordCountSelector = exports.currentPageSelector = exports.pageSizeSelector = exports.dataLoadingSelector = exports.dataSelector = undefined;\n\nvar _union2 = require('lodash/union');\n\nvar _union3 = _interopRequireDefault(_union2);\n\nvar _isFinite2 = require('lodash/isFinite');\n\nvar _isFinite3 = _interopRequireDefault(_isFinite2);\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _reselect = require('reselect');\n\nvar _maxSafeInteger = require('max-safe-integer');\n\nvar _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar createDeepEqualSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _isEqual3.default); //import { createSelector } from 'reselect';\n\n/** Gets the full dataset currently tracked by Griddle */\n\nvar dataSelector = exports.dataSelector = function dataSelector(state) {\n  return state.get('data');\n};\n\nvar dataLoadingSelector = exports.dataLoadingSelector = (0, _reselect.createSelector)(dataSelector, function (data) {\n  return !data;\n});\n/** Gets the page size */\n\nvar pageSizeSelector = exports.pageSizeSelector = function pageSizeSelector(state) {\n  return state.getIn(['pageProperties', 'pageSize']);\n};\n/** Gets the current page */\n\n\nvar currentPageSelector = exports.currentPageSelector = function currentPageSelector(state) {\n  return state.getIn(['pageProperties', 'currentPage']);\n};\n/** Gets the record count */\n\n\nvar recordCountSelector = exports.recordCountSelector = function recordCountSelector(state) {\n  return state.getIn(['pageProperties', 'recordCount']);\n};\n/** Gets the render properties */\n\n\nvar renderPropertiesSelector = exports.renderPropertiesSelector = function renderPropertiesSelector(state) {\n  return state.get('renderProperties');\n};\n/** Determines if there are previous pages */\n\n\nvar hasPreviousSelector = exports.hasPreviousSelector = (0, _reselect.createSelector)(currentPageSelector, function (currentPage) {\n  return currentPage > 1;\n});\n/** Gets the max page size\n */\n\nvar maxPageSelector = exports.maxPageSelector = (0, _reselect.createSelector)(pageSizeSelector, recordCountSelector, function (pageSize, recordCount) {\n  var calc = recordCount / pageSize;\n  var result = calc > Math.floor(calc) ? Math.floor(calc) + 1 : Math.floor(calc);\n  return (0, _isFinite3.default)(result) ? result : 1;\n});\n/** Determines if there are more pages available. Assumes pageProperties.maxPage is set by the container */\n\nvar hasNextSelector = exports.hasNextSelector = (0, _reselect.createSelector)(currentPageSelector, maxPageSelector, function (currentPage, maxPage) {\n  return currentPage < maxPage;\n});\n/** Gets current filter */\n\nvar filterSelector = exports.filterSelector = function filterSelector(state) {\n  return state.get('filter') || '';\n};\n/** Gets the current sortColumns */\n\n\nvar sortColumnsSelector = exports.sortColumnsSelector = function sortColumnsSelector(state) {\n  return state.get('sortColumns') || [];\n};\n/** Gets all the columns */\n\n\nvar allColumnsSelector = exports.allColumnsSelector = (0, _reselect.createSelector)(dataSelector, renderPropertiesSelector, function (data, renderProperties) {\n  var dataColumns = !data || data.size === 0 ? [] : data.get(0).keySeq().toJSON();\n  var columnPropertyColumns = renderProperties && renderProperties.size > 0 ? // TODO: Make this not so ugly\n  Object.keys(renderProperties.get('columnProperties').toJSON()) : [];\n  return (0, _union3.default)(dataColumns, columnPropertyColumns);\n});\n/** Gets the column properties objects sorted by order\n */\n\nvar sortedColumnPropertiesSelector = exports.sortedColumnPropertiesSelector = (0, _reselect.createSelector)(renderPropertiesSelector, function (renderProperties) {\n  return renderProperties && renderProperties.get('columnProperties') && renderProperties.get('columnProperties').size !== 0 ? renderProperties.get('columnProperties').sortBy(function (col) {\n    return col && col.get('order') || _maxSafeInteger2.default;\n  }) : null;\n});\n/** Gets metadata column ids\n */\n\nvar metaDataColumnsSelector = exports.metaDataColumnsSelector = (0, _reselect.createSelector)(sortedColumnPropertiesSelector, function (sortedColumnProperties) {\n  return sortedColumnProperties ? sortedColumnProperties.filter(function (c) {\n    return c.get('isMetadata');\n  }).keySeq().toJSON() : [];\n});\n/** Gets the visible columns either obtaining the sorted column properties or all columns\n */\n\nvar visibleColumnsSelector = exports.visibleColumnsSelector = (0, _reselect.createSelector)(sortedColumnPropertiesSelector, allColumnsSelector, function (sortedColumnProperties, allColumns) {\n  return sortedColumnProperties ? sortedColumnProperties.filter(function (c) {\n    var isVisible = c.get('visible') || c.get('visible') === undefined;\n    var isMetadata = c.get('isMetadata');\n    return isVisible && !isMetadata;\n  }).keySeq().toJSON() : allColumns;\n});\n/** TODO: add tests and docs\n */\n\nvar visibleColumnPropertiesSelector = exports.visibleColumnPropertiesSelector = (0, _reselect.createSelector)(visibleColumnsSelector, renderPropertiesSelector, function () {\n  var visibleColumns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var renderProperties = arguments[1];\n  return visibleColumns.map(function (c) {\n    var columnProperty = renderProperties.getIn(['columnProperties', c]);\n    return columnProperty && columnProperty.toJSON() || {\n      id: c\n    };\n  });\n});\n/** Gets the possible columns that are currently hidden */\n\nvar hiddenColumnsSelector = exports.hiddenColumnsSelector = (0, _reselect.createSelector)(visibleColumnsSelector, allColumnsSelector, metaDataColumnsSelector, function (visibleColumns, allColumns, metaDataColumns) {\n  var removeColumns = [].concat(_toConsumableArray(visibleColumns), _toConsumableArray(metaDataColumns));\n  return allColumns.filter(function (c) {\n    return removeColumns.indexOf(c) === -1;\n  });\n});\n/** TODO: add tests and docs\n */\n\nvar hiddenColumnPropertiesSelector = exports.hiddenColumnPropertiesSelector = (0, _reselect.createSelector)(hiddenColumnsSelector, renderPropertiesSelector, function () {\n  var hiddenColumns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var renderProperties = arguments[1];\n  return hiddenColumns.map(function (c) {\n    var columnProperty = renderProperties.getIn(['columnProperties', c]);\n    return columnProperty && columnProperty.toJSON() || {\n      id: c\n    };\n  });\n});\n/** Gets the sort property for a given column */\n\nvar sortPropertyByIdSelector = exports.sortPropertyByIdSelector = function sortPropertyByIdSelector(state, _ref) {\n  var columnId = _ref.columnId;\n  var sortProperties = state.get('sortProperties');\n  var individualProperty = sortProperties && sortProperties.size > 0 && sortProperties.find(function (r) {\n    return r.get('id') === columnId;\n  });\n  return individualProperty && individualProperty.toJSON() || null;\n};\n/** Gets the icons property from styles */\n\n\nvar iconByNameSelector = exports.iconByNameSelector = function iconByNameSelector(state, _ref2) {\n  var name = _ref2.name;\n  return state.getIn(['styleConfig', 'icons', name]);\n};\n/** Gets the icons for a component */\n\n\nvar iconsForComponentSelector = exports.iconsForComponentSelector = function iconsForComponentSelector(state, componentName) {\n  var icons = state.getIn(['styleConfig', 'icons', componentName]);\n  return icons && icons.toJS ? icons.toJS() : icons;\n};\n/** Gets a style for a component */\n\n\nvar stylesForComponentSelector = exports.stylesForComponentSelector = function stylesForComponentSelector(state, componentName) {\n  var style = state.getIn(['styleConfig', 'styles', componentName]);\n  return style && style.toJS ? style.toJS() : style;\n};\n/** Gets a classname for a component */\n\n\nvar classNamesForComponentSelector = exports.classNamesForComponentSelector = function classNamesForComponentSelector(state, componentName) {\n  var classNames = state.getIn(['styleConfig', 'classNames', componentName]);\n  return classNames && classNames.toJS ? classNames.toJS() : classNames;\n};\n/** Gets a custom component for a given column\n* TODO: Needs tests\n*/\n\n\nvar customComponentSelector = exports.customComponentSelector = function customComponentSelector(state, _ref3) {\n  var columnId = _ref3.columnId;\n  return state.getIn(['renderProperties', 'columnProperties', columnId, 'customComponent']);\n};\n/** Gets a custom heading component for a given column\n* TODO: Needs tests\n*/\n\n\nvar customHeadingComponentSelector = exports.customHeadingComponentSelector = function customHeadingComponentSelector(state, _ref4) {\n  var columnId = _ref4.columnId;\n  return state.getIn(['renderProperties', 'columnProperties', columnId, 'customHeadingComponent']);\n};\n\nvar isSettingsEnabledSelector = exports.isSettingsEnabledSelector = function isSettingsEnabledSelector(state) {\n  var enableSettings = state.get('enableSettings');\n  return enableSettings === undefined ? true : enableSettings;\n};\n\nvar isSettingsVisibleSelector = exports.isSettingsVisibleSelector = function isSettingsVisibleSelector(state) {\n  return state.get('showSettings');\n};\n\nvar textSelector = exports.textSelector = function textSelector(state, _ref5) {\n  var key = _ref5.key;\n  return state.getIn(['textProperties', key]);\n};\n/** Gets the column ids for the visible columns\n*/\n\n\nvar columnIdsSelector = exports.columnIdsSelector = (0, _reselect.createSelector)(renderPropertiesSelector, visibleColumnsSelector, function (renderProperties, visibleColumns) {\n  var offset = 1000; // TODO: Make this better -- This is pretty inefficient\n\n  return visibleColumns.map(function (k, index) {\n    return {\n      id: renderProperties.getIn(['columnProperties', k, 'id']) || k,\n      order: renderProperties.getIn(['columnProperties', k, 'order']) || offset + index\n    };\n  }).sort(function (first, second) {\n    return first.order - second.order;\n  }).map(function (item) {\n    return item.id;\n  });\n});\n/** Gets the column titles for the visible columns\n */\n\nvar columnTitlesSelector = exports.columnTitlesSelector = (0, _reselect.createSelector)(columnIdsSelector, renderPropertiesSelector, function (columnIds, renderProperties) {\n  return columnIds.map(function (k) {\n    return renderProperties.getIn(['columnProperties', k, 'title']) || k;\n  });\n});\n/** Gets the griddleIds for the visible rows */\n\nvar visibleRowIdsSelector = exports.visibleRowIdsSelector = (0, _reselect.createSelector)(dataSelector, function (currentPageData) {\n  return currentPageData ? currentPageData.map(function (c) {\n    return c.get('griddleKey');\n  }) : new _immutable2.default.List();\n});\n/** Gets the count of visible rows */\n\nvar visibleRowCountSelector = exports.visibleRowCountSelector = (0, _reselect.createSelector)(visibleRowIdsSelector, function (visibleRowIds) {\n  return visibleRowIds.size;\n}); // TODO: Needs tests and jsdoc\n\nvar cellValueSelector = exports.cellValueSelector = function cellValueSelector(state, props) {\n  var griddleKey = props.griddleKey,\n      columnId = props.columnId;\n  var cellProperties = cellPropertiesSelector(state, props); //TODO: Make Griddle key a string in data utils\n\n  var lookup = state.getIn(['lookup', griddleKey.toString()]);\n  var value = state.get('data').get(lookup).getIn(columnId.split('.'));\n  var type = !!cellProperties ? cellProperties.type : 'string';\n\n  switch (type) {\n    case 'date':\n      return value.toLocaleDateString();\n\n    case 'string':\n    default:\n      return value;\n  }\n}; // TODO: Needs jsdoc\n\n\nvar rowDataSelector = exports.rowDataSelector = function rowDataSelector(state, _ref6) {\n  var griddleKey = _ref6.griddleKey;\n  var rowIndex = state.getIn(['lookup', griddleKey.toString()]);\n  return state.get('data').get(rowIndex).toJSON();\n};\n/** Gets the row render properties\n */\n\n\nvar rowPropertiesSelector = exports.rowPropertiesSelector = function rowPropertiesSelector(state) {\n  var row = state.getIn(['renderProperties', 'rowProperties']);\n  return row && row.toJSON() || {};\n};\n/** Gets the column render properties for the specified columnId\n */\n\n\nvar cellPropertiesSelectorFactory = exports.cellPropertiesSelectorFactory = function cellPropertiesSelectorFactory() {\n  var immutableCellPropertiesSelector = function immutableCellPropertiesSelector(state, _ref7) {\n    var columnId = _ref7.columnId;\n    var item = state.getIn(['renderProperties', 'columnProperties', columnId]);\n    return item && item.toJSON() || {};\n  };\n\n  return createDeepEqualSelector(immutableCellPropertiesSelector, function (item) {\n    return item;\n  });\n};\n\nvar cellPropertiesSelector = exports.cellPropertiesSelector = cellPropertiesSelectorFactory();","map":null,"metadata":{},"sourceType":"script"}