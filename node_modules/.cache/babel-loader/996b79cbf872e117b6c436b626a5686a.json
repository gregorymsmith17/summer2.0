{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar StoreListener = exports.StoreListener = function StoreListener(store) {\n  var _this = this;\n\n  _classCallCheck(this, StoreListener);\n\n  this.removeListener = function (name) {\n    if (_this.unsubscribers.hasOwnProperty(name)) {\n      _this.unsubscribers[name]();\n\n      delete _this.unsubscribers[name];\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  this.addListener = function (listener, name, otherArgs) {\n    // attempt to unsubscribe an existing listener if the new \n    // listener name matches\n    // if no name is provided, do nothing\n    name && _this.removeListener(name);\n\n    var unsubscribe = function () {\n      var oldState = void 0;\n      return _this.store.subscribe(function () {\n        var newState = _this.store.getState();\n\n        listener(oldState, newState, _extends({}, otherArgs));\n        oldState = newState;\n      });\n    }(); // if name was provided, add the unsubscribe\n    // otherwise this is an \"anonymous\" listener\n\n\n    name && (_this.unsubscribers[name] = unsubscribe);\n    return unsubscribe;\n  };\n\n  this.hasListener = function (name) {\n    return _this.unsubscribers.hasOwnProperty(name);\n  };\n\n  this.store = store;\n  this.unsubscribers = {};\n} // Adds a listener to the store.\n// Will attempt to remove an existing listener if the name\n// matches that of an existing listener.\n// If no name is provided this is an anonymous lister, it\n// is not registered in the list of unsubscribe functions,\n// returns the unsubscribe function so it can still be handled\n// manually if desired.\n;","map":null,"metadata":{},"sourceType":"script"}