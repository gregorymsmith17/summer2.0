{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.textSelector = exports.cellPropertiesSelector = exports.rowPropertiesSelector = exports.classNamesForComponentSelector = exports.stylesForComponentSelector = exports.iconsByNameSelector = exports.iconsForComponentSelector = exports.rowDataSelector = exports.cellValueSelector = exports.columnTitlesSelector = exports.columnIdsSelector = exports.hiddenColumnsSelector = exports.visibleRowCountSelector = exports.visibleRowIdsSelector = exports.visibleDataSelector = exports.currentPageDataSelector = exports.sortedDataSelector = exports.hasPreviousSelector = exports.hasNextSelector = exports.visibleColumnsSelector = exports.sortedColumnPropertiesSelector = exports.allColumnsSelector = exports.maxPageSelector = exports.filteredDataSelector = exports.metaDataColumnsSelector = exports.renderPropertiesSelector = exports.sortMethodSelector = exports.sortPropertiesSelector = exports.filterSelector = exports.pageSizeSelector = exports.currentPageSelector = exports.dataLoadingSelector = exports.dataSelector = undefined;\n\nvar _isFinite2 = require('lodash/isFinite');\n\nvar _isFinite3 = _interopRequireDefault(_isFinite2);\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _reselect = require('reselect');\n\nvar _sortUtils = require('../../../utils/sortUtils');\n\nvar _dataUtils = require('../../../utils/dataUtils');\n\nvar _dataSelectors = require('../../../selectors/dataSelectors');\n\nvar dataSelectors = _interopRequireWildcard(_dataSelectors);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/** Gets the entire data set\n * @param {Immutable} state - state object\n */\n\n\nvar dataSelector = exports.dataSelector = function dataSelector(state) {\n  return state.get('data');\n};\n\nvar dataLoadingSelector = exports.dataLoadingSelector = dataSelectors.dataLoadingSelector;\n/** Gets the current page from pageProperties\n * @param {Immutable} state - state object\n */\n\nvar currentPageSelector = exports.currentPageSelector = function currentPageSelector(state) {\n  return state.getIn(['pageProperties', 'currentPage']);\n};\n/** Gets the currently set page size\n * @param {Immutable} state - state object\n */\n\n\nvar pageSizeSelector = exports.pageSizeSelector = function pageSizeSelector(state) {\n  return state.getIn(['pageProperties', 'pageSize']);\n};\n/** Gets the currently set filter\n */\n\n\nvar filterSelector = exports.filterSelector = function filterSelector(state) {\n  return state.get('filter') || '';\n};\n\nvar sortPropertiesSelector = exports.sortPropertiesSelector = function sortPropertiesSelector(state) {\n  return state.get('sortProperties');\n};\n\nvar sortMethodSelector = exports.sortMethodSelector = function sortMethodSelector(state) {\n  return state.get('sortMethod');\n};\n\nvar renderPropertiesSelector = exports.renderPropertiesSelector = function renderPropertiesSelector(state) {\n  return state.get('renderProperties');\n};\n\nvar metaDataColumnsSelector = exports.metaDataColumnsSelector = dataSelectors.metaDataColumnsSelector;\n\nvar columnPropertiesSelector = function columnPropertiesSelector(state) {\n  return state.getIn(['renderProperties', 'columnProperties']);\n};\n\nvar substringSearch = function substringSearch(value, filter) {\n  if (!filter) {\n    return true;\n  }\n\n  var filterToLower = filter.toLowerCase();\n  return value && value.toString().toLowerCase().indexOf(filterToLower) > -1;\n};\n\nvar filterable = function filterable(columnProperties, key) {\n  if (key === 'griddleKey') {\n    return false;\n  }\n\n  if (columnProperties) {\n    if (columnProperties.get(key) === undefined || columnProperties.getIn([key, 'filterable']) === false) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar textFilterRowSearch = function textFilterRowSearch(columnProperties, filter) {\n  return function (row) {\n    return row.keySeq().some(function (key) {\n      if (!filterable(columnProperties, key)) {\n        return false;\n      }\n\n      return substringSearch(row.get(key), filter);\n    });\n  };\n};\n\nvar objectFilterRowSearch = function objectFilterRowSearch(columnProperties, filter) {\n  return function (row, i, data) {\n    return row.keySeq().every(function (key) {\n      if (!filterable(columnProperties, key)) {\n        return true;\n      }\n\n      var keyFilter = filter.get(key);\n\n      switch (typeof keyFilter === 'undefined' ? 'undefined' : _typeof(keyFilter)) {\n        case 'string':\n          return substringSearch(row.get(key), keyFilter);\n          break;\n\n        case 'function':\n          return keyFilter(row.get(key), i, data);\n          break;\n\n        default:\n          return true;\n          break;\n      }\n    });\n  };\n};\n/** Gets the data filtered by the current filter\n */\n\n\nvar filteredDataSelector = exports.filteredDataSelector = (0, _reselect.createSelector)(dataSelector, filterSelector, columnPropertiesSelector, function (data, filter, columnProperties) {\n  if (!filter || !data) {\n    return data;\n  }\n\n  switch (typeof filter === 'undefined' ? 'undefined' : _typeof(filter)) {\n    case 'string':\n      return data.filter(textFilterRowSearch(columnProperties, filter));\n\n    case 'object':\n      return data.filter(objectFilterRowSearch(columnProperties, filter));\n\n    case 'function':\n      return data.filter(filter);\n\n    default:\n      return data;\n  }\n});\n/** Gets the max page size\n */\n\nvar maxPageSelector = exports.maxPageSelector = (0, _reselect.createSelector)(pageSizeSelector, filteredDataSelector, function (pageSize, data) {\n  var total = data ? data.size : 0;\n  var calc = total / pageSize;\n  var result = calc > Math.floor(calc) ? Math.floor(calc) + 1 : Math.floor(calc);\n  return (0, _isFinite3.default)(result) ? result : 1;\n});\nvar allColumnsSelector = exports.allColumnsSelector = (0, _reselect.createSelector)(dataSelector, function (data) {\n  return !data || data.size === 0 ? [] : data.get(0).keySeq().toJSON();\n});\n/** Gets the column properties objects sorted by order\n */\n\nvar sortedColumnPropertiesSelector = exports.sortedColumnPropertiesSelector = dataSelectors.sortedColumnPropertiesSelector;\n/** Gets the visible columns either obtaining the sorted column properties or all columns\n */\n\nvar visibleColumnsSelector = exports.visibleColumnsSelector = dataSelectors.visibleColumnsSelector;\n/** Returns whether or not this result set has more pages\n */\n\nvar hasNextSelector = exports.hasNextSelector = (0, _reselect.createSelector)(currentPageSelector, maxPageSelector, function (currentPage, maxPage) {\n  return currentPage < maxPage;\n});\n/** Returns whether or not there is a previous page to the current data\n */\n\nvar hasPreviousSelector = exports.hasPreviousSelector = function hasPreviousSelector(state) {\n  return state.getIn(['pageProperties', 'currentPage']) > 1;\n};\n/** Gets the data sorted by the sort function specified in render properties\n *  if no sort method is supplied, it will use the default sort defined in griddle\n */\n\n\nvar sortedDataSelector = exports.sortedDataSelector = (0, _reselect.createSelector)(filteredDataSelector, sortPropertiesSelector, renderPropertiesSelector, sortMethodSelector, function (filteredData, sortProperties, renderProperties) {\n  var sortMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _sortUtils.defaultSort;\n\n  if (!sortProperties) {\n    return filteredData;\n  }\n\n  return sortProperties.reverse().reduce(function (data, sortColumnOptions) {\n    var columnProperties = renderProperties && renderProperties.get('columnProperties').get(sortColumnOptions.get('id'));\n    var sortFunction = columnProperties && columnProperties.get('sortMethod') || sortMethod;\n    return sortFunction(data, sortColumnOptions.get('id'), sortColumnOptions.get('sortAscending'));\n  }, filteredData);\n});\n/** Gets the current page of data\n */\n\nvar currentPageDataSelector = exports.currentPageDataSelector = (0, _reselect.createSelector)(sortedDataSelector, pageSizeSelector, currentPageSelector, function (sortedData, pageSize, currentPage) {\n  if (!sortedData) {\n    return [];\n  }\n\n  return sortedData.skip(pageSize * (currentPage - 1)).take(pageSize);\n});\n/** Get the visible data (and only the columns that are visible)\n */\n\nvar visibleDataSelector = exports.visibleDataSelector = (0, _reselect.createSelector)(currentPageDataSelector, visibleColumnsSelector, function (currentPageData, visibleColumns) {\n  return (0, _dataUtils.getVisibleDataForColumns)(currentPageData, visibleColumns);\n});\n/** Gets the griddleIds for the visible rows */\n\nvar visibleRowIdsSelector = exports.visibleRowIdsSelector = (0, _reselect.createSelector)(currentPageDataSelector, function (currentPageData) {\n  return currentPageData ? currentPageData.map(function (c) {\n    return c.get('griddleKey');\n  }) : new _immutable2.default.List();\n});\n/** Gets the count of visible rows */\n\nvar visibleRowCountSelector = exports.visibleRowCountSelector = (0, _reselect.createSelector)(visibleRowIdsSelector, function (visibleRowIds) {\n  return visibleRowIds.size;\n});\n/** Gets the columns that are not currently visible\n */\n\nvar hiddenColumnsSelector = exports.hiddenColumnsSelector = (0, _reselect.createSelector)(visibleColumnsSelector, allColumnsSelector, metaDataColumnsSelector, function (visibleColumns, allColumns, metaDataColumns) {\n  var removeColumns = [].concat(_toConsumableArray(visibleColumns), _toConsumableArray(metaDataColumns));\n  return allColumns.filter(function (c) {\n    return removeColumns.indexOf(c) === -1;\n  });\n});\n/** Gets the column ids for the visible columns\n*/\n\nvar columnIdsSelector = exports.columnIdsSelector = (0, _reselect.createSelector)(visibleDataSelector, renderPropertiesSelector, function (visibleData, renderProperties) {\n  if (visibleData.size > 0) {\n    return Object.keys(visibleData.get(0).toJSON()).map(function (k) {\n      return renderProperties.getIn(['columnProperties', k, 'id']) || k;\n    });\n  }\n});\n/** Gets the column titles for the visible columns\n */\n\nvar columnTitlesSelector = exports.columnTitlesSelector = dataSelectors.columnTitlesSelector;\nvar cellValueSelector = exports.cellValueSelector = dataSelectors.cellValueSelector;\nvar rowDataSelector = exports.rowDataSelector = dataSelectors.rowDataSelector;\nvar iconsForComponentSelector = exports.iconsForComponentSelector = dataSelectors.iconsForComponentSelector;\nvar iconsByNameSelector = exports.iconsByNameSelector = dataSelectors.iconsForComponentSelector;\nvar stylesForComponentSelector = exports.stylesForComponentSelector = dataSelectors.stylesForComponentSelector;\nvar classNamesForComponentSelector = exports.classNamesForComponentSelector = dataSelectors.classNamesForComponentSelector;\nvar rowPropertiesSelector = exports.rowPropertiesSelector = dataSelectors.rowPropertiesSelector;\nvar cellPropertiesSelector = exports.cellPropertiesSelector = dataSelectors.cellPropertiesSelector;\nvar textSelector = exports.textSelector = dataSelectors.textSelector;","map":null,"metadata":{},"sourceType":"script"}