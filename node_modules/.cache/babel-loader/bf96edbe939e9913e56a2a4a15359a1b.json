{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types'), require('react-dom')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types', 'react-dom'], factory) : (global = global || self, factory(global.SortableHOC = {}, global.React, global.PropTypes, global.ReactDOM));\n})(this, function (exports, React, PropTypes, reactDom) {\n  'use strict';\n\n  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  var _extends_1 = createCommonjsModule(function (module) {\n    function _extends() {\n      module.exports = _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      return _extends.apply(this, arguments);\n    }\n\n    module.exports = _extends;\n  });\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  var arrayWithHoles = _arrayWithHoles;\n\n  function _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  var iterableToArrayLimit = _iterableToArrayLimit;\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  var nonIterableRest = _nonIterableRest;\n\n  function _slicedToArray(arr, i) {\n    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n  }\n\n  var slicedToArray = _slicedToArray;\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n  }\n\n  var arrayWithoutHoles = _arrayWithoutHoles;\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  var iterableToArray = _iterableToArray;\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var nonIterableSpread = _nonIterableSpread;\n\n  function _toConsumableArray(arr) {\n    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n  }\n\n  var toConsumableArray = _toConsumableArray;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var classCallCheck = _classCallCheck;\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  var createClass = _createClass;\n\n  var _typeof_1 = createCommonjsModule(function (module) {\n    function _typeof2(obj) {\n      if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof2 = function _typeof2(obj) {\n          return typeof obj;\n        };\n      } else {\n        _typeof2 = function _typeof2(obj) {\n          return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n      }\n\n      return _typeof2(obj);\n    }\n\n    function _typeof(obj) {\n      if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n        module.exports = _typeof = function _typeof(obj) {\n          return _typeof2(obj);\n        };\n      } else {\n        module.exports = _typeof = function _typeof(obj) {\n          return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n        };\n      }\n\n      return _typeof(obj);\n    }\n\n    module.exports = _typeof;\n  });\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  var assertThisInitialized = _assertThisInitialized;\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (_typeof_1(call) === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return assertThisInitialized(self);\n  }\n\n  var possibleConstructorReturn = _possibleConstructorReturn;\n  var getPrototypeOf = createCommonjsModule(function (module) {\n    function _getPrototypeOf(o) {\n      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n      };\n      return _getPrototypeOf(o);\n    }\n\n    module.exports = _getPrototypeOf;\n  });\n  var setPrototypeOf = createCommonjsModule(function (module) {\n    function _setPrototypeOf(o, p) {\n      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n      };\n\n      return _setPrototypeOf(o, p);\n    }\n\n    module.exports = _setPrototypeOf;\n  });\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) setPrototypeOf(subClass, superClass);\n  }\n\n  var inherits = _inherits;\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var defineProperty = _defineProperty;\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  /**\n   * Use invariant() to assert state which your program assumes to be true.\n   *\n   * Provide sprintf-style format (only %s is supported) and arguments\n   * to provide information about what broke and what you were\n   * expecting.\n   *\n   * The invariant message will be stripped in production, but the invariant\n   * will remain to ensure logic does not differ in production.\n   */\n\n  var NODE_ENV = process.env.NODE_ENV;\n\n  var invariant = function invariant(condition, format, a, b, c, d, e, f) {\n    if (NODE_ENV !== 'production') {\n      if (format === undefined) {\n        throw new Error('invariant requires an error message argument');\n      }\n    }\n\n    if (!condition) {\n      var error;\n\n      if (format === undefined) {\n        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n      } else {\n        var args = [a, b, c, d, e, f];\n        var argIndex = 0;\n        error = new Error(format.replace(/%s/g, function () {\n          return args[argIndex++];\n        }));\n        error.name = 'Invariant Violation';\n      }\n\n      error.framesToPop = 1; // we don't care about invariant's own frame\n\n      throw error;\n    }\n  };\n\n  var invariant_1 = invariant;\n\n  var Manager = function () {\n    function Manager() {\n      classCallCheck(this, Manager);\n      defineProperty(this, \"refs\", {});\n    }\n\n    createClass(Manager, [{\n      key: \"add\",\n      value: function add(collection, ref) {\n        if (!this.refs[collection]) {\n          this.refs[collection] = [];\n        }\n\n        this.refs[collection].push(ref);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(collection, ref) {\n        var index = this.getIndex(collection, ref);\n\n        if (index !== -1) {\n          this.refs[collection].splice(index, 1);\n        }\n      }\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this.active;\n      }\n    }, {\n      key: \"getActive\",\n      value: function getActive() {\n        var _this = this;\n\n        return this.refs[this.active.collection].find(function (_ref) {\n          var node = _ref.node;\n          return node.sortableInfo.index == _this.active.index;\n        });\n      }\n    }, {\n      key: \"getIndex\",\n      value: function getIndex(collection, ref) {\n        return this.refs[collection].indexOf(ref);\n      }\n    }, {\n      key: \"getOrderedRefs\",\n      value: function getOrderedRefs() {\n        var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;\n        return this.refs[collection].sort(sortByIndex);\n      }\n    }]);\n    return Manager;\n  }();\n\n  function sortByIndex(_ref2, _ref3) {\n    var index1 = _ref2.node.sortableInfo.index;\n    var index2 = _ref3.node.sortableInfo.index;\n    return index1 - index2;\n  }\n\n  function arrayMove(array, from, to) {\n    array = array.slice();\n    array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n    return array;\n  }\n\n  function omit(obj) {\n    for (var _len = arguments.length, keysToOmit = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      keysToOmit[_key - 1] = arguments[_key];\n    }\n\n    return Object.keys(obj).reduce(function (acc, key) {\n      if (keysToOmit.indexOf(key) === -1) {\n        acc[key] = obj[key];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  var events = {\n    start: ['touchstart', 'mousedown'],\n    move: ['touchmove', 'mousemove'],\n    end: ['touchend', 'touchcancel', 'mouseup']\n  };\n\n  var vendorPrefix = function () {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      return '';\n    }\n\n    var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];\n    var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];\n\n    switch (pre) {\n      case 'ms':\n        return 'ms';\n\n      default:\n        return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';\n    }\n  }();\n\n  function closest(el, fn) {\n    while (el) {\n      if (fn(el)) {\n        return el;\n      }\n\n      el = el.parentNode;\n    }\n\n    return null;\n  }\n\n  function limit(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  function getPixelValue(stringValue) {\n    if (stringValue.substr(-2) === 'px') {\n      return parseFloat(stringValue);\n    }\n\n    return 0;\n  }\n\n  function getElementMargin(element) {\n    var style = window.getComputedStyle(element);\n    return {\n      top: getPixelValue(style.marginTop),\n      right: getPixelValue(style.marginRight),\n      bottom: getPixelValue(style.marginBottom),\n      left: getPixelValue(style.marginLeft)\n    };\n  }\n\n  function provideDisplayName(prefix, Component) {\n    var componentName = Component.displayName || Component.name;\n    return componentName ? \"\".concat(prefix, \"(\").concat(componentName, \")\") : prefix;\n  }\n\n  function getPosition(event) {\n    if (event.touches && event.touches.length) {\n      return {\n        x: event.touches[0].pageX,\n        y: event.touches[0].pageY\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      return {\n        x: event.changedTouches[0].pageX,\n        y: event.changedTouches[0].pageY\n      };\n    } else {\n      return {\n        x: event.pageX,\n        y: event.pageY\n      };\n    }\n  }\n\n  function isTouchEvent(event) {\n    return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n  }\n\n  function getEdgeOffset(node, parent) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      top: 0,\n      left: 0\n    };\n\n    if (!node) {\n      return undefined;\n    }\n\n    var nodeOffset = {\n      top: offset.top + node.offsetTop,\n      left: offset.left + node.offsetLeft\n    };\n\n    if (node.parentNode === parent) {\n      return nodeOffset;\n    }\n\n    return getEdgeOffset(node.parentNode, parent, nodeOffset);\n  }\n\n  function getLockPixelOffset(_ref) {\n    var lockOffset = _ref.lockOffset,\n        width = _ref.width,\n        height = _ref.height;\n    var offsetX = lockOffset;\n    var offsetY = lockOffset;\n    var unit = 'px';\n\n    if (typeof lockOffset === 'string') {\n      var match = /^[+-]?\\d*(?:\\.\\d*)?(px|%)$/.exec(lockOffset);\n      invariant_1(match !== null, 'lockOffset value should be a number or a string of a ' + 'number followed by \"px\" or \"%\". Given %s', lockOffset);\n      offsetX = parseFloat(lockOffset);\n      offsetY = parseFloat(lockOffset);\n      unit = match[1];\n    }\n\n    invariant_1(isFinite(offsetX) && isFinite(offsetY), 'lockOffset value should be a finite. Given %s', lockOffset);\n\n    if (unit === '%') {\n      offsetX = offsetX * width / 100;\n      offsetY = offsetY * height / 100;\n    }\n\n    return {\n      x: offsetX,\n      y: offsetY\n    };\n  }\n\n  function _finallyRethrows(body, finalizer) {\n    try {\n      var result = body();\n    } catch (e) {\n      return finalizer(true, e);\n    }\n\n    if (result && result.then) {\n      return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n    }\n\n    return finalizer(false, value);\n  }\n\n  function sortableContainer(WrappedComponent) {\n    var _class, _temp;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withRef: false\n    };\n    return _temp = _class = function (_React$Component) {\n      inherits(WithSortableContainer, _React$Component);\n\n      function WithSortableContainer(props) {\n        var _this;\n\n        classCallCheck(this, WithSortableContainer);\n        _this = possibleConstructorReturn(this, getPrototypeOf(WithSortableContainer).call(this, props));\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handleStart\", function (event) {\n          var _this$props = _this.props,\n              distance = _this$props.distance,\n              shouldCancelStart = _this$props.shouldCancelStart;\n\n          if (event.button === 2 || shouldCancelStart(event)) {\n            return;\n          }\n\n          _this._touched = true;\n          _this._pos = getPosition(event);\n          var node = closest(event.target, function (el) {\n            return el.sortableInfo != null;\n          });\n\n          if (node && node.sortableInfo && _this.nodeIsChild(node) && !_this.state.sorting) {\n            var useDragHandle = _this.props.useDragHandle;\n            var _node$sortableInfo = node.sortableInfo,\n                index = _node$sortableInfo.index,\n                collection = _node$sortableInfo.collection,\n                disabled = _node$sortableInfo.disabled;\n\n            if (disabled) {\n              return;\n            }\n\n            if (useDragHandle && !closest(event.target, function (el) {\n              return el.sortableHandle != null;\n            })) {\n              return;\n            }\n\n            _this.manager.active = {\n              index: index,\n              collection: collection\n            };\n\n            if (!isTouchEvent(event) && event.target.tagName.toLowerCase() === 'a') {\n              event.preventDefault();\n            }\n\n            if (!distance) {\n              if (_this.props.pressDelay === 0) {\n                _this.handlePress(event);\n              } else {\n                _this.pressTimer = setTimeout(function () {\n                  return _this.handlePress(event);\n                }, _this.props.pressDelay);\n              }\n            }\n          }\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"nodeIsChild\", function (node) {\n          return node.sortableInfo.manager === _this.manager;\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handleMove\", function (event) {\n          var _this$props2 = _this.props,\n              distance = _this$props2.distance,\n              pressThreshold = _this$props2.pressThreshold;\n\n          if (!_this.state.sorting && _this._touched && !_this._awaitingUpdateBeforeSortStart) {\n            var position = getPosition(event);\n            var delta = {\n              x: _this._pos.x - position.x,\n              y: _this._pos.y - position.y\n            };\n            var combinedDelta = Math.abs(delta.x) + Math.abs(delta.y);\n            _this.delta = delta;\n\n            if (!distance && (!pressThreshold || pressThreshold && combinedDelta >= pressThreshold)) {\n              clearTimeout(_this.cancelTimer);\n              _this.cancelTimer = setTimeout(_this.cancel, 0);\n            } else if (distance && combinedDelta >= distance && _this.manager.isActive()) {\n              _this.handlePress(event);\n            }\n          }\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handleEnd\", function () {\n          _this._touched = false;\n\n          _this.cancel();\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"cancel\", function () {\n          var distance = _this.props.distance;\n          var sorting = _this.state.sorting;\n\n          if (!sorting) {\n            if (!distance) {\n              clearTimeout(_this.pressTimer);\n            }\n\n            _this.manager.active = null;\n          }\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handlePress\", function (event) {\n          try {\n            var active = _this.manager.getActive();\n\n            var _temp6 = function () {\n              if (active) {\n                var _temp7 = function _temp7() {\n                  var margin = getElementMargin(_node);\n\n                  var containerBoundingRect = _this.container.getBoundingClientRect();\n\n                  var dimensions = _getHelperDimensions({\n                    index: _index,\n                    node: _node,\n                    collection: _collection\n                  });\n\n                  _this.node = _node;\n                  _this.margin = margin;\n                  _this.width = dimensions.width;\n                  _this.height = dimensions.height;\n                  _this.marginOffset = {\n                    x: _this.margin.left + _this.margin.right,\n                    y: Math.max(_this.margin.top, _this.margin.bottom)\n                  };\n                  _this.boundingClientRect = _node.getBoundingClientRect();\n                  _this.containerBoundingRect = containerBoundingRect;\n                  _this.index = _index;\n                  _this.newIndex = _index;\n                  _this.axis = {\n                    x: _axis.indexOf('x') >= 0,\n                    y: _axis.indexOf('y') >= 0\n                  };\n                  _this.offsetEdge = getEdgeOffset(_node, _this.container);\n                  _this.initialOffset = getPosition(event);\n                  _this.initialScroll = {\n                    top: _this.container.scrollTop,\n                    left: _this.container.scrollLeft\n                  };\n                  _this.initialWindowScroll = {\n                    top: window.pageYOffset,\n                    left: window.pageXOffset\n                  };\n\n                  var fields = _node.querySelectorAll('input, textarea, select');\n\n                  var clonedNode = _node.cloneNode(true);\n\n                  var clonedFields = toConsumableArray(clonedNode.querySelectorAll('input, textarea, select'));\n                  clonedFields.forEach(function (field, i) {\n                    if (field.type !== 'file' && fields[_index]) {\n                      field.value = fields[i].value;\n                    }\n                  });\n                  _this.helper = _this.helperContainer.appendChild(clonedNode);\n                  _this.helper.style.position = 'fixed';\n                  _this.helper.style.top = \"\".concat(_this.boundingClientRect.top - margin.top, \"px\");\n                  _this.helper.style.left = \"\".concat(_this.boundingClientRect.left - margin.left, \"px\");\n                  _this.helper.style.width = \"\".concat(_this.width, \"px\");\n                  _this.helper.style.height = \"\".concat(_this.height, \"px\");\n                  _this.helper.style.boxSizing = 'border-box';\n                  _this.helper.style.pointerEvents = 'none';\n\n                  if (_hideSortableGhost) {\n                    _this.sortableGhost = _node;\n                    _node.style.visibility = 'hidden';\n                    _node.style.opacity = 0;\n                  }\n\n                  _this.minTranslate = {};\n                  _this.maxTranslate = {};\n\n                  if (_this.axis.x) {\n                    _this.minTranslate.x = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - _this.boundingClientRect.left - _this.width / 2;\n                    _this.maxTranslate.x = (_useWindowAsScrollContainer ? _this.contentWindow.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - _this.boundingClientRect.left - _this.width / 2;\n                  }\n\n                  if (_this.axis.y) {\n                    _this.minTranslate.y = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - _this.boundingClientRect.top - _this.height / 2;\n                    _this.maxTranslate.y = (_useWindowAsScrollContainer ? _this.contentWindow.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - _this.boundingClientRect.top - _this.height / 2;\n                  }\n\n                  if (_helperClass) {\n                    var _this$helper$classLis;\n\n                    (_this$helper$classLis = _this.helper.classList).add.apply(_this$helper$classLis, toConsumableArray(_helperClass.split(' ')));\n                  }\n\n                  _this.listenerNode = event.touches ? _node : _this.contentWindow;\n                  events.move.forEach(function (eventName) {\n                    return _this.listenerNode.addEventListener(eventName, _this.handleSortMove, false);\n                  });\n                  events.end.forEach(function (eventName) {\n                    return _this.listenerNode.addEventListener(eventName, _this.handleSortEnd, false);\n                  });\n\n                  _this.setState({\n                    sorting: true,\n                    sortingIndex: _index\n                  });\n\n                  if (_onSortStart) {\n                    _onSortStart({\n                      node: _node,\n                      index: _index,\n                      collection: _collection\n                    }, event);\n                  }\n                };\n\n                var _this$props3 = _this.props,\n                    _axis = _this$props3.axis,\n                    _getHelperDimensions = _this$props3.getHelperDimensions,\n                    _helperClass = _this$props3.helperClass,\n                    _hideSortableGhost = _this$props3.hideSortableGhost,\n                    updateBeforeSortStart = _this$props3.updateBeforeSortStart,\n                    _onSortStart = _this$props3.onSortStart,\n                    _useWindowAsScrollContainer = _this$props3.useWindowAsScrollContainer;\n                var _node = active.node,\n                    _collection = active.collection;\n                var _index = _node.sortableInfo.index;\n\n                var _temp8 = function () {\n                  if (typeof updateBeforeSortStart === 'function') {\n                    _this._awaitingUpdateBeforeSortStart = true;\n\n                    var _temp9 = _finallyRethrows(function () {\n                      return Promise.resolve(updateBeforeSortStart({\n                        node: _node,\n                        index: _index,\n                        collection: _collection\n                      }, event)).then(function () {});\n                    }, function (_wasThrown, _result) {\n                      _this._awaitingUpdateBeforeSortStart = false;\n                      if (_wasThrown) throw _result;\n                      return _result;\n                    });\n\n                    if (_temp9 && _temp9.then) return _temp9.then(function () {});\n                  }\n                }();\n\n                return _temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8);\n              }\n            }();\n\n            return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(function () {}) : void 0);\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handleSortMove\", function (event) {\n          var onSortMove = _this.props.onSortMove;\n          event.preventDefault();\n\n          _this.updatePosition(event);\n\n          _this.animateNodes();\n\n          _this.autoscroll();\n\n          if (onSortMove) {\n            onSortMove(event);\n          }\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"handleSortEnd\", function (event) {\n          var _this$props4 = _this.props,\n              hideSortableGhost = _this$props4.hideSortableGhost,\n              onSortEnd = _this$props4.onSortEnd;\n          var collection = _this.manager.active.collection;\n\n          if (_this.listenerNode) {\n            events.move.forEach(function (eventName) {\n              return _this.listenerNode.removeEventListener(eventName, _this.handleSortMove);\n            });\n            events.end.forEach(function (eventName) {\n              return _this.listenerNode.removeEventListener(eventName, _this.handleSortEnd);\n            });\n          }\n\n          _this.helper.parentNode.removeChild(_this.helper);\n\n          if (hideSortableGhost && _this.sortableGhost) {\n            _this.sortableGhost.style.visibility = '';\n            _this.sortableGhost.style.opacity = '';\n          }\n\n          var nodes = _this.manager.refs[collection];\n\n          for (var i = 0, len = nodes.length; i < len; i++) {\n            var _node2 = nodes[i];\n            var el = _node2.node;\n            _node2.edgeOffset = null;\n            el.style[\"\".concat(vendorPrefix, \"Transform\")] = '';\n            el.style[\"\".concat(vendorPrefix, \"TransitionDuration\")] = '';\n          }\n\n          clearInterval(_this.autoscrollInterval);\n          _this.autoscrollInterval = null;\n          _this.manager.active = null;\n\n          _this.setState({\n            sorting: false,\n            sortingIndex: null\n          });\n\n          if (typeof onSortEnd === 'function') {\n            onSortEnd({\n              oldIndex: _this.index,\n              newIndex: _this.newIndex,\n              collection: collection\n            }, event);\n          }\n\n          _this._touched = false;\n        });\n        defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"autoscroll\", function () {\n          var disableAutoscroll = _this.props.disableAutoscroll;\n\n          if (disableAutoscroll) {\n            return;\n          }\n\n          var translate = _this.translate;\n          var direction = {\n            x: 0,\n            y: 0\n          };\n          var speed = {\n            x: 1,\n            y: 1\n          };\n          var acceleration = {\n            x: 10,\n            y: 10\n          };\n          var _this$scrollContainer = _this.scrollContainer,\n              scrollTop = _this$scrollContainer.scrollTop,\n              scrollLeft = _this$scrollContainer.scrollLeft,\n              scrollHeight = _this$scrollContainer.scrollHeight,\n              scrollWidth = _this$scrollContainer.scrollWidth,\n              clientHeight = _this$scrollContainer.clientHeight,\n              clientWidth = _this$scrollContainer.clientWidth;\n          var isTop = scrollTop === 0;\n          var isBottom = scrollHeight - scrollTop - clientHeight === 0;\n          var isLeft = scrollLeft === 0;\n          var isRight = scrollWidth - scrollLeft - clientWidth === 0;\n\n          if (translate.y >= _this.maxTranslate.y - _this.height / 2 && !isBottom) {\n            direction.y = 1;\n            speed.y = acceleration.y * Math.abs((_this.maxTranslate.y - _this.height / 2 - translate.y) / _this.height);\n          } else if (translate.x >= _this.maxTranslate.x - _this.width / 2 && !isRight) {\n            direction.x = 1;\n            speed.x = acceleration.x * Math.abs((_this.maxTranslate.x - _this.width / 2 - translate.x) / _this.width);\n          } else if (translate.y <= _this.minTranslate.y + _this.height / 2 && !isTop) {\n            direction.y = -1;\n            speed.y = acceleration.y * Math.abs((translate.y - _this.height / 2 - _this.minTranslate.y) / _this.height);\n          } else if (translate.x <= _this.minTranslate.x + _this.width / 2 && !isLeft) {\n            direction.x = -1;\n            speed.x = acceleration.x * Math.abs((translate.x - _this.width / 2 - _this.minTranslate.x) / _this.width);\n          }\n\n          if (_this.autoscrollInterval) {\n            clearInterval(_this.autoscrollInterval);\n            _this.autoscrollInterval = null;\n            _this.isAutoScrolling = false;\n          }\n\n          if (direction.x !== 0 || direction.y !== 0) {\n            _this.autoscrollInterval = setInterval(function () {\n              _this.isAutoScrolling = true;\n              var offset = {\n                left: speed.x * direction.x,\n                top: speed.y * direction.y\n              };\n              _this.scrollContainer.scrollTop += offset.top;\n              _this.scrollContainer.scrollLeft += offset.left;\n              _this.translate.x += offset.left;\n              _this.translate.y += offset.top;\n\n              _this.animateNodes();\n            }, 5);\n          }\n        });\n        _this.manager = new Manager();\n        _this.events = {\n          start: _this.handleStart,\n          move: _this.handleMove,\n          end: _this.handleEnd\n        };\n        invariant_1(!(props.distance && props.pressDelay), 'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.');\n        _this.state = {};\n        return _this;\n      }\n\n      createClass(WithSortableContainer, [{\n        key: \"getChildContext\",\n        value: function getChildContext() {\n          return {\n            manager: this.manager\n          };\n        }\n      }, {\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          var _this2 = this;\n\n          var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;\n          var container = this.getContainer();\n          Promise.resolve(container).then(function (containerNode) {\n            _this2.container = containerNode;\n            _this2.document = _this2.container.ownerDocument || document;\n            var contentWindow = _this2.props.contentWindow || _this2.document.defaultView || window;\n            _this2.contentWindow = typeof contentWindow === 'function' ? contentWindow() : contentWindow;\n            _this2.scrollContainer = useWindowAsScrollContainer ? _this2.document.scrollingElement || _this2.document.documentElement : _this2.container;\n\n            var _loop = function _loop(key) {\n              if (_this2.events.hasOwnProperty(key)) {\n                events[key].forEach(function (eventName) {\n                  return _this2.container.addEventListener(eventName, _this2.events[key], false);\n                });\n              }\n            };\n\n            for (var key in _this2.events) {\n              _loop(key);\n            }\n          });\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          var _this3 = this;\n\n          if (this.container) {\n            var _loop2 = function _loop2(key) {\n              if (_this3.events.hasOwnProperty(key)) {\n                events[key].forEach(function (eventName) {\n                  return _this3.container.removeEventListener(eventName, _this3.events[key]);\n                });\n              }\n            };\n\n            for (var key in this.events) {\n              _loop2(key);\n            }\n          }\n        }\n      }, {\n        key: \"getLockPixelOffsets\",\n        value: function getLockPixelOffsets() {\n          var width = this.width,\n              height = this.height;\n          var lockOffset = this.props.lockOffset;\n          var offsets = Array.isArray(lockOffset) ? lockOffset : [lockOffset, lockOffset];\n          invariant_1(offsets.length === 2, 'lockOffset prop of SortableContainer should be a single ' + 'value or an array of exactly two values. Given %s', lockOffset);\n\n          var _offsets = slicedToArray(offsets, 2),\n              minLockOffset = _offsets[0],\n              maxLockOffset = _offsets[1];\n\n          return [getLockPixelOffset({\n            lockOffset: minLockOffset,\n            width: width,\n            height: height\n          }), getLockPixelOffset({\n            lockOffset: maxLockOffset,\n            width: width,\n            height: height\n          })];\n        }\n      }, {\n        key: \"updatePosition\",\n        value: function updatePosition(event) {\n          var _this$props5 = this.props,\n              lockAxis = _this$props5.lockAxis,\n              lockToContainerEdges = _this$props5.lockToContainerEdges;\n          var offset = getPosition(event);\n          var translate = {\n            x: offset.x - this.initialOffset.x,\n            y: offset.y - this.initialOffset.y\n          };\n          translate.y -= window.pageYOffset - this.initialWindowScroll.top;\n          translate.x -= window.pageXOffset - this.initialWindowScroll.left;\n          this.translate = translate;\n\n          if (lockToContainerEdges) {\n            var _this$getLockPixelOff = this.getLockPixelOffsets(),\n                _this$getLockPixelOff2 = slicedToArray(_this$getLockPixelOff, 2),\n                minLockOffset = _this$getLockPixelOff2[0],\n                maxLockOffset = _this$getLockPixelOff2[1];\n\n            var minOffset = {\n              x: this.width / 2 - minLockOffset.x,\n              y: this.height / 2 - minLockOffset.y\n            };\n            var maxOffset = {\n              x: this.width / 2 - maxLockOffset.x,\n              y: this.height / 2 - maxLockOffset.y\n            };\n            translate.x = limit(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);\n            translate.y = limit(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);\n          }\n\n          if (lockAxis === 'x') {\n            translate.y = 0;\n          } else if (lockAxis === 'y') {\n            translate.x = 0;\n          }\n\n          this.helper.style[\"\".concat(vendorPrefix, \"Transform\")] = \"translate3d(\".concat(translate.x, \"px,\").concat(translate.y, \"px, 0)\");\n        }\n      }, {\n        key: \"animateNodes\",\n        value: function animateNodes() {\n          var _this$props6 = this.props,\n              transitionDuration = _this$props6.transitionDuration,\n              hideSortableGhost = _this$props6.hideSortableGhost,\n              onSortOver = _this$props6.onSortOver;\n          var nodes = this.manager.getOrderedRefs();\n          var containerScrollDelta = {\n            left: this.container.scrollLeft - this.initialScroll.left,\n            top: this.container.scrollTop - this.initialScroll.top\n          };\n          var sortingOffset = {\n            left: this.offsetEdge.left + this.translate.x + containerScrollDelta.left,\n            top: this.offsetEdge.top + this.translate.y + containerScrollDelta.top\n          };\n          var windowScrollDelta = {\n            top: window.pageYOffset - this.initialWindowScroll.top,\n            left: window.pageXOffset - this.initialWindowScroll.left\n          };\n          var prevIndex = this.newIndex;\n          this.newIndex = null;\n\n          for (var i = 0, len = nodes.length; i < len; i++) {\n            var _node3 = nodes[i].node;\n            var _index2 = _node3.sortableInfo.index;\n            var width = _node3.offsetWidth;\n            var height = _node3.offsetHeight;\n            var offset = {\n              width: this.width > width ? width / 2 : this.width / 2,\n              height: this.height > height ? height / 2 : this.height / 2\n            };\n            var translate = {\n              x: 0,\n              y: 0\n            };\n            var edgeOffset = nodes[i].edgeOffset;\n\n            if (!edgeOffset) {\n              edgeOffset = getEdgeOffset(_node3, this.container);\n              nodes[i].edgeOffset = edgeOffset;\n            }\n\n            var nextNode = i < nodes.length - 1 && nodes[i + 1];\n            var prevNode = i > 0 && nodes[i - 1];\n\n            if (nextNode && !nextNode.edgeOffset) {\n              nextNode.edgeOffset = getEdgeOffset(nextNode.node, this.container);\n            }\n\n            if (_index2 === this.index) {\n              if (hideSortableGhost) {\n                this.sortableGhost = _node3;\n                _node3.style.visibility = 'hidden';\n                _node3.style.opacity = 0;\n              }\n\n              continue;\n            }\n\n            if (transitionDuration) {\n              _node3.style[\"\".concat(vendorPrefix, \"TransitionDuration\")] = \"\".concat(transitionDuration, \"ms\");\n            }\n\n            if (this.axis.x) {\n              if (this.axis.y) {\n                if (_index2 < this.index && (sortingOffset.left + windowScrollDelta.left - offset.width <= edgeOffset.left && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height || sortingOffset.top + windowScrollDelta.top + offset.height <= edgeOffset.top)) {\n                  translate.x = this.width + this.marginOffset.x;\n\n                  if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {\n                    if (nextNode) {\n                      translate.x = nextNode.edgeOffset.left - edgeOffset.left;\n                      translate.y = nextNode.edgeOffset.top - edgeOffset.top;\n                    }\n                  }\n\n                  if (this.newIndex === null) {\n                    this.newIndex = _index2;\n                  }\n                } else if (_index2 > this.index && (sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top || sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top + height)) {\n                  translate.x = -(this.width + this.marginOffset.x);\n\n                  if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {\n                    if (prevNode) {\n                      translate.x = prevNode.edgeOffset.left - edgeOffset.left;\n                      translate.y = prevNode.edgeOffset.top - edgeOffset.top;\n                    }\n                  }\n\n                  this.newIndex = _index2;\n                }\n              } else {\n                if (_index2 > this.index && sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left) {\n                  translate.x = -(this.width + this.marginOffset.x);\n                  this.newIndex = _index2;\n                } else if (_index2 < this.index && sortingOffset.left + windowScrollDelta.left <= edgeOffset.left + offset.width) {\n                  translate.x = this.width + this.marginOffset.x;\n\n                  if (this.newIndex == null) {\n                    this.newIndex = _index2;\n                  }\n                }\n              }\n            } else if (this.axis.y) {\n              if (_index2 > this.index && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top) {\n                translate.y = -(this.height + this.marginOffset.y);\n                this.newIndex = _index2;\n              } else if (_index2 < this.index && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height) {\n                translate.y = this.height + this.marginOffset.y;\n\n                if (this.newIndex == null) {\n                  this.newIndex = _index2;\n                }\n              }\n            }\n\n            _node3.style[\"\".concat(vendorPrefix, \"Transform\")] = \"translate3d(\".concat(translate.x, \"px,\").concat(translate.y, \"px,0)\");\n          }\n\n          if (this.newIndex == null) {\n            this.newIndex = this.index;\n          }\n\n          if (onSortOver && this.newIndex !== prevIndex) {\n            onSortOver({\n              newIndex: this.newIndex,\n              oldIndex: prevIndex,\n              index: this.index,\n              collection: this.manager.active.collection\n            });\n          }\n        }\n      }, {\n        key: \"getWrappedInstance\",\n        value: function getWrappedInstance() {\n          invariant_1(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call');\n          return this.refs.wrappedInstance;\n        }\n      }, {\n        key: \"getContainer\",\n        value: function getContainer() {\n          var getContainer = this.props.getContainer;\n\n          if (typeof getContainer !== 'function') {\n            return reactDom.findDOMNode(this);\n          }\n\n          return getContainer(config.withRef ? this.getWrappedInstance() : undefined);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var ref = config.withRef ? 'wrappedInstance' : null;\n          return React.createElement(WrappedComponent, _extends_1({\n            ref: ref\n          }, omit(this.props, 'contentWindow', 'useWindowAsScrollContainer', 'distance', 'helperClass', 'hideSortableGhost', 'transitionDuration', 'useDragHandle', 'pressDelay', 'pressThreshold', 'shouldCancelStart', 'updateBeforeSortStart', 'onSortStart', 'onSortMove', 'onSortEnd', 'axis', 'lockAxis', 'lockOffset', 'lockToContainerEdges', 'getContainer', 'getHelperDimensions', 'helperContainer', 'disableAutoscroll')));\n        }\n      }, {\n        key: \"helperContainer\",\n        get: function get() {\n          var helperContainer = this.props.helperContainer;\n\n          if (typeof helperContainer === 'function') {\n            return helperContainer();\n          }\n\n          return this.props.helperContainer || this.document.body;\n        }\n      }]);\n      return WithSortableContainer;\n    }(React.Component), defineProperty(_class, \"displayName\", provideDisplayName('sortableList', WrappedComponent)), defineProperty(_class, \"defaultProps\", {\n      axis: 'y',\n      transitionDuration: 300,\n      pressDelay: 0,\n      pressThreshold: 5,\n      distance: 0,\n      useWindowAsScrollContainer: false,\n      hideSortableGhost: true,\n      shouldCancelStart: function shouldCancelStart(event) {\n        var disabledElements = ['input', 'textarea', 'select', 'option', 'button'];\n\n        if (disabledElements.indexOf(event.target.tagName.toLowerCase()) !== -1) {\n          return true;\n        }\n\n        return false;\n      },\n      lockToContainerEdges: false,\n      lockOffset: '50%',\n      getHelperDimensions: function getHelperDimensions(_ref) {\n        var node = _ref.node;\n        return {\n          width: node.offsetWidth,\n          height: node.offsetHeight\n        };\n      },\n      disableAutoscroll: false\n    }), defineProperty(_class, \"propTypes\", {\n      axis: PropTypes.oneOf(['x', 'y', 'xy']),\n      distance: PropTypes.number,\n      lockAxis: PropTypes.string,\n      helperClass: PropTypes.string,\n      transitionDuration: PropTypes.number,\n      contentWindow: PropTypes.any,\n      updateBeforeSortStart: PropTypes.func,\n      onSortStart: PropTypes.func,\n      onSortMove: PropTypes.func,\n      onSortOver: PropTypes.func,\n      onSortEnd: PropTypes.func,\n      shouldCancelStart: PropTypes.func,\n      pressDelay: PropTypes.number,\n      pressThreshold: PropTypes.number,\n      useDragHandle: PropTypes.bool,\n      useWindowAsScrollContainer: PropTypes.bool,\n      hideSortableGhost: PropTypes.bool,\n      lockToContainerEdges: PropTypes.bool,\n      lockOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))]),\n      getContainer: PropTypes.func,\n      getHelperDimensions: PropTypes.func,\n      helperContainer: PropTypes.oneOfType([PropTypes.func, typeof HTMLElement === 'undefined' ? PropTypes.any : PropTypes.instanceOf(HTMLElement)]),\n      disableAutoscroll: PropTypes.bool\n    }), defineProperty(_class, \"childContextTypes\", {\n      manager: PropTypes.object.isRequired\n    }), _temp;\n  }\n\n  function sortableElement(WrappedComponent) {\n    var _class, _temp;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withRef: false\n    };\n    return _temp = _class = function (_React$Component) {\n      inherits(WithSortableElement, _React$Component);\n\n      function WithSortableElement() {\n        classCallCheck(this, WithSortableElement);\n        return possibleConstructorReturn(this, getPrototypeOf(WithSortableElement).apply(this, arguments));\n      }\n\n      createClass(WithSortableElement, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.register();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate(prevProps) {\n          if (this.node) {\n            if (prevProps.index !== this.props.index) {\n              this.node.sortableInfo.index = this.props.index;\n            }\n\n            if (prevProps.disabled !== this.props.disabled) {\n              this.node.sortableInfo.disabled = this.props.disabled;\n            }\n          }\n\n          if (prevProps.collection !== this.props.collection) {\n            this.unregister(prevProps.collection);\n            this.register();\n          }\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.unregister();\n        }\n      }, {\n        key: \"register\",\n        value: function register() {\n          var _this$props = this.props,\n              collection = _this$props.collection,\n              disabled = _this$props.disabled,\n              index = _this$props.index;\n          var node = reactDom.findDOMNode(this);\n          node.sortableInfo = {\n            index: index,\n            collection: collection,\n            disabled: disabled,\n            manager: this.context.manager\n          };\n          this.node = node;\n          this.ref = {\n            node: node\n          };\n          this.context.manager.add(collection, this.ref);\n        }\n      }, {\n        key: \"unregister\",\n        value: function unregister() {\n          var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.collection;\n          this.context.manager.remove(collection, this.ref);\n        }\n      }, {\n        key: \"getWrappedInstance\",\n        value: function getWrappedInstance() {\n          invariant_1(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');\n          return this.refs.wrappedInstance;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var ref = config.withRef ? 'wrappedInstance' : null;\n          return React.createElement(WrappedComponent, _extends_1({\n            ref: ref\n          }, omit(this.props, 'collection', 'disabled', 'index')));\n        }\n      }]);\n      return WithSortableElement;\n    }(React.Component), defineProperty(_class, \"displayName\", provideDisplayName('sortableElement', WrappedComponent)), defineProperty(_class, \"contextTypes\", {\n      manager: PropTypes.object.isRequired\n    }), defineProperty(_class, \"propTypes\", {\n      index: PropTypes.number.isRequired,\n      collection: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      disabled: PropTypes.bool\n    }), defineProperty(_class, \"defaultProps\", {\n      collection: 0\n    }), _temp;\n  }\n\n  function sortableHandle(WrappedComponent) {\n    var _class, _temp;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withRef: false\n    };\n    return _temp = _class = function (_React$Component) {\n      inherits(WithSortableHandle, _React$Component);\n\n      function WithSortableHandle() {\n        classCallCheck(this, WithSortableHandle);\n        return possibleConstructorReturn(this, getPrototypeOf(WithSortableHandle).apply(this, arguments));\n      }\n\n      createClass(WithSortableHandle, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          var node = reactDom.findDOMNode(this);\n          node.sortableHandle = true;\n        }\n      }, {\n        key: \"getWrappedInstance\",\n        value: function getWrappedInstance() {\n          invariant_1(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call');\n          return this.refs.wrappedInstance;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var ref = config.withRef ? 'wrappedInstance' : null;\n          return React.createElement(WrappedComponent, _extends_1({\n            ref: ref\n          }, this.props));\n        }\n      }]);\n      return WithSortableHandle;\n    }(React.Component), defineProperty(_class, \"displayName\", provideDisplayName('sortableHandle', WrappedComponent)), _temp;\n  }\n\n  exports.SortableContainer = sortableContainer;\n  exports.sortableContainer = sortableContainer;\n  exports.SortableElement = sortableElement;\n  exports.sortableElement = sortableElement;\n  exports.SortableHandle = sortableHandle;\n  exports.sortableHandle = sortableHandle;\n  exports.arrayMove = arrayMove;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}