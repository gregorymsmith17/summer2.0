{"ast":null,"code":"import _objectSpread from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/Card.js\";\nimport { DragSource, DropTarget } from 'react-dnd';\nimport React, { Component } from 'react';\nimport ItemTypes from './ItemTypes';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport flow from 'lodash/flow';\nvar style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index\n    };\n  }\n};\nvar cardTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Determine rectangle on screen\n\n\n    var hoverBoundingRect = findDOMNode(component).getBoundingClientRect(); // Get vertical middle\n\n    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          text = _this$props.text,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var opacity = isDragging ? 0 : 1;\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        style: _objectSpread({}, style, {\n          opacity: opacity\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, text)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nCard.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  id: PropTypes.any.isRequired,\n  text: PropTypes.string.isRequired,\n  moveCard: PropTypes.func.isRequired\n};\nexport default flow([DragSource(ItemTypes.CARD, cardSource, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}), DropTarget(ItemTypes.CARD, cardTarget, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})])(Card);","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/Card.js"],"names":["DragSource","DropTarget","React","Component","ItemTypes","PropTypes","findDOMNode","flow","style","border","padding","marginBottom","backgroundColor","cursor","cardSource","beginDrag","props","id","index","cardTarget","hover","monitor","component","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveCard","Card","text","isDragging","connectDragSource","connectDropTarget","opacity","propTypes","func","isRequired","number","bool","any","string","CARD","connect","dragSource","dropTarget"],"mappings":"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","sourcesContent":["import { DragSource, DropTarget } from 'react-dnd'\nimport React, { Component } from 'react'\n\nimport ItemTypes from './ItemTypes'\nimport PropTypes from 'prop-types'\nimport { findDOMNode } from 'react-dom'\nimport flow from 'lodash/flow'\n\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move',\n}\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index,\n    }\n  },\n}\n\nconst cardTarget = {\n  hover(props, monitor, component) {\n    const dragIndex = monitor.getItem().index\n    const hoverIndex = props.index\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return\n    }\n\n    // Determine rectangle on screen\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect()\n\n    // Get vertical middle\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n    // Determine mouse position\n    const clientOffset = monitor.getClientOffset()\n\n    // Get pixels to the top\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n    // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return\n    }\n\n    // Time to actually perform the action\n    props.moveCard(dragIndex, hoverIndex)\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex\n  },\n}\n\nclass Card extends Component {\n  static propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    id: PropTypes.any.isRequired,\n    text: PropTypes.string.isRequired,\n    moveCard: PropTypes.func.isRequired,\n  }\n\n  render() {\n    const { text, isDragging, connectDragSource, connectDropTarget } = this.props\n    const opacity = isDragging ? 0 : 1\n\n    return connectDragSource(connectDropTarget(\n      <div style={{ ...style, opacity }}>\n        {text}\n      </div>,\n    ))\n  }\n}\n\nexport default flow([\n  DragSource(ItemTypes.CARD, cardSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  })),\n  DropTarget(ItemTypes.CARD, cardTarget, connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }))\n])(Card);\n"]},"metadata":{},"sourceType":"module"}