{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/dashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Navbar, Nav, Grid, Jumbotron, Row, Col, NavItem, Button, Modal, Panel } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport FileSaver from 'file-saver';\nimport * as jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport fileDownload from \"js-file-download\";\nimport Request from 'superagent';\nimport firebase from 'firebase';\nimport { fire } from '../fire';\nimport { BootstrapTable, BootstrapButton, TableHeaderColumn } from 'react-bootstrap-table';\nimport { TiArrowSortedDown, TiArrowSortedUp, TiPencil, TiTrash } from \"react-icons/ti\";\nimport { LineChart, BarChart, Bar, Surface, ReferenceLine, ReferenceArea, AreaChart, Brush, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.imageFormatter = function (cell, row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }));\n    };\n\n    _this.state = {\n      //The data that goes into the table showing weather data\n      weatherData: [],\n      iconData: [],\n      id: '',\n      key: 1,\n      currentCity: '',\n      currentTemp: '',\n      currentIcon: '',\n      currentDescription: '',\n      currentHumidity: '',\n      //checkbox status\n      checkboxState: true,\n      checkboxState1: true,\n      checkboxStatenitrogen: true,\n      checkboxStatephosphorus: true,\n      checkboxStatetds: true,\n      checkboxStatepH: true,\n      checkboxStatetss: true,\n      checkboxStatesalinity: true,\n      checkboxStateconductivity: true,\n      checkboxStatehardness: true,\n      checkboxStateturbidity: true,\n      //these are for the graphs\n      tempPlot: 'temp',\n      doPlot: 'do',\n      conductivityPlot: 'conductivity',\n      tdsPlot: 'tds',\n      salinityPlot: 'salinity',\n      pHPlot: 'pH',\n      turbidityPlot: 'turbidity',\n      nitrogenPlot: 'nitrogen',\n      phosphorusPlot: 'phosphorus',\n      totalHardnessPlot: 'totalHardness',\n      tssPlot: 'tss'\n    };\n    return _this;\n  } //async allows await to be used for API calls.  Without ASYNC an error will be called saying that await is a reserved word.\n  //ComponentDidMount runs over and over again\n\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var weatherData, city, temp, icon, description, humidity, api_callWeather, weatherResponse, symbol;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.removeAuthListener = fire.auth().onAuthStateChanged(function (user) {\n                  var samplesRef = fire.database().ref(\"monthlySamples/\".concat(user.uid));\n                  samplesRef.on('value', function (snapshot) {\n                    var dataList = snapshot.val();\n                    var filter = [];\n                    var orders = snapshot.val();\n                    var orders2 = snapshot.val();\n                    var newState = [];\n                    var newState2 = [];\n                    var newState3 = [];\n\n                    for (var order in orders) {\n                      newState.push({\n                        id: order,\n                        sampleDate: orders[order].sampleDate,\n                        sampleTaker: orders[order].sampleTaker,\n                        temp: orders[order].temp,\n                        do: orders[order].do,\n                        conductivity: orders[order].conductivity,\n                        tds: orders[order].tds,\n                        salinity: orders[order].salinity,\n                        pH: orders[order].pH,\n                        turbidity: orders[order].turbidity,\n                        nitrogen: orders[order].nitrogen,\n                        phosphorus: orders[order].phosphorus,\n                        totalHardness: orders[order].totalHardness,\n                        tss: orders[order].tss,\n                        sampleNotes: orders[order].sampleNotes\n                      });\n                      newState2.push({\n                        id: order,\n                        sampleDate: orders[order].sampleDate,\n                        sampleTaker: orders[order].sampleTaker,\n                        temp: orders[order].temp,\n                        do: orders[order].do,\n                        conductivity: orders[order].conductivity,\n                        tds: orders[order].tds,\n                        salinity: orders[order].salinity,\n                        pH: orders[order].pH,\n                        turbidity: orders[order].turbidity,\n                        nitrogen: orders[order].nitrogen,\n                        phosphorus: orders[order].phosphorus,\n                        totalHardness: orders[order].totalHardness,\n                        tss: orders[order].tss,\n                        sampleNotes: orders[order].sampleNotes\n                      });\n                    }\n\n                    newState2.sort(function (a, b) {\n                      if (a.sampleDate === b.sampleDate) {\n                        return 0;\n                      }\n\n                      return a.sampleDate > b.sampleDate ? 1 : -1;\n                    });\n                    newState.sort(function (a, b) {\n                      if (b.sampleDate === a.sampleDate) {\n                        return 0;\n                      }\n\n                      return b.sampleDate > a.sampleDate ? 1 : -1;\n                    });\n\n                    _this2.setState({\n                      orders: newState,\n                      orders2: newState2,\n                      dataList: newState,\n                      color: _this2.state.color\n                    });\n                  });\n                  var colorsRef = fire.database().ref(\"colors/\".concat(user.uid));\n                  colorsRef.on('value', function (snapshot) {\n                    var colorList = snapshot.val();\n                    console.log(colorList);\n\n                    _this2.setState({\n                      tempColor: snapshot.child('tempColor').val()\n                    });\n                  });\n                });\n                weatherData = [];\n                city = '';\n                temp = '';\n                icon = '';\n                description = '';\n                humidity = '';\n                _context.next = 9;\n                return fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\".concat('37.997', \"&lon=\", '-121.71', \"&units=\", 'imperial', \"&appid=\", '30573b68170d7f4400c7ac9c1c671ccf'));\n\n              case 9:\n                api_callWeather = _context.sent;\n                _context.next = 12;\n                return api_callWeather.json();\n\n              case 12:\n                weatherResponse = _context.sent;\n                symbol = weatherResponse.weather[0].icon;\n                console.log(weatherResponse);\n                this.setState({\n                  currentCity: weatherResponse.name,\n                  currentTemp: weatherResponse.main.temp,\n                  currentIcon: 'http://openweathermap.org/img/w/' + weatherResponse.weather[0].icon + '.png',\n                  currentDescription: weatherResponse.weather[0].main,\n                  currentHumidity: weatherResponse.main.humidity\n                });\n                console.log(this.state.currentIcon);\n                this.removeAuthListener = fire.auth().onAuthStateChanged(function (user) {\n                  var samplesRef = fire.database().ref(\"dailySamples/\".concat(user.uid));\n                  samplesRef.on('value', function (snapshot) {});\n                });\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"toggleNitrogen\",\n    value: function toggleNitrogen(event) {\n      this.setState({\n        checkboxState: !this.state.checkboxState\n      });\n      var checkboxState = this.state.checkboxState;\n\n      if (checkboxState) {\n        this.setState({\n          nitrogenPlot: ''\n        });\n      } else {\n        this.setState({\n          nitrogenPlot: 'nitrogen'\n        });\n      }\n    }\n  }, {\n    key: \"togglePhosphorus\",\n    value: function togglePhosphorus(event) {\n      this.setState({\n        checkboxStatephosphorus: !this.state.checkboxStatephosphorus\n      });\n      var checkboxState = this.state.checkboxStatephosphorus;\n\n      if (checkboxState) {\n        this.setState({\n          phosphorusPlot: ''\n        });\n      } else {\n        this.setState({\n          phosphorusPlot: 'phosphorus'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTemp\",\n    value: function toggleTemp(event) {\n      this.setState({\n        checkboxStatenitrogen: !this.state.checkboxStatenitrogen\n      });\n      var checkboxState = this.state.checkboxStatenitrogen;\n\n      if (checkboxState) {\n        this.setState({\n          tempPlot: ''\n        });\n      } else {\n        this.setState({\n          tempPlot: 'temp'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTDS\",\n    value: function toggleTDS(event) {\n      this.setState({\n        checkboxStatetds: !this.state.checkboxStatetds\n      });\n      var checkboxState = this.state.checkboxStatetds;\n\n      if (checkboxState) {\n        this.setState({\n          tdsPlot: ''\n        });\n      } else {\n        this.setState({\n          tdsPlot: 'tds'\n        });\n      }\n    }\n  }, {\n    key: \"togglepH\",\n    value: function togglepH(event) {\n      this.setState({\n        checkboxStatepH: !this.state.checkboxStatepH\n      });\n      var checkboxState = this.state.checkboxStatepH;\n\n      if (checkboxState) {\n        this.setState({\n          pHPlot: ''\n        });\n      } else {\n        this.setState({\n          pHPlot: 'pH'\n        });\n      }\n    }\n  }, {\n    key: \"toggletss\",\n    value: function toggletss(event) {\n      this.setState({\n        checkboxStatetss: !this.state.checkboxStatetss\n      });\n      var checkboxState = this.state.checkboxStatetss;\n\n      if (checkboxState) {\n        this.setState({\n          tssPlot: ''\n        });\n      } else {\n        this.setState({\n          tssPlot: 'tss'\n        });\n      }\n    }\n  }, {\n    key: \"togglesalinity\",\n    value: function togglesalinity(event) {\n      this.setState({\n        checkboxStatesalinity: !this.state.checkboxStatesalinity\n      });\n      var checkboxState = this.state.checkboxStatesalinity;\n\n      if (checkboxState) {\n        this.setState({\n          salinityPlot: ''\n        });\n      } else {\n        this.setState({\n          salinityPlot: 'salinity'\n        });\n      }\n    }\n  }, {\n    key: \"toggleHardness\",\n    value: function toggleHardness(event) {\n      this.setState({\n        checkboxStatehardness: !this.state.checkboxStatehardness\n      });\n      var checkboxState = this.state.checkboxStatehardness;\n\n      if (checkboxState) {\n        this.setState({\n          totalHardnessPlot: ''\n        });\n      } else {\n        this.setState({\n          totalHardnessPlot: 'totalHardness'\n        });\n      }\n    }\n  }, {\n    key: \"toggleTurbidity\",\n    value: function toggleTurbidity(event) {\n      this.setState({\n        checkboxStateturbidity: !this.state.checkboxStateturbidity\n      });\n      var checkboxState = this.state.checkboxStateturbidity;\n\n      if (checkboxState) {\n        this.setState({\n          turbidityPlot: ''\n        });\n      } else {\n        this.setState({\n          turbidityPlot: 'turbidity'\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 11,\n        sm: 11,\n        md: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, \"Summer Lake\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, \"Homeowners Association\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 4,\n        sm: 4,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(Panel.Title, {\n        style: {\n          textAlign: 'center'\n        },\n        componentClass: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, \"Weather\")), React.createElement(Panel.Body, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, this.state.currentCity), React.createElement(\"img\", {\n        style: {\n          width: '75px',\n          height: '75px'\n        },\n        src: this.state.currentIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, this.state.currentDescription), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, \"Temperature: \", this.state.currentTemp), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, \"Humidity: \", this.state.currentHumidity))))), React.createElement(Col, {\n        xs: 7,\n        sm: 7,\n        md: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, React.createElement(Panel.Title, {\n        componentClass: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, \"Water Quality\")), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"Panel content\"))))), React.createElement(Row, {\n        style: {\n          paddingTop: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 8,\n        sm: 8,\n        md: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(BootstrapTable, {\n        data: this.state.weatherData,\n        containerStyle: {\n          width: '800px',\n          overflowX: 'scroll'\n        },\n        pagination: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"date\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, \" Date\"), React.createElement(TableHeaderColumn, {\n        dataField: \"temp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, \"Temp\"), React.createElement(TableHeaderColumn, {\n        dataField: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \"Description\"), React.createElement(TableHeaderColumn, {\n        dataField: \"image\",\n        dataFormat: this.imageFormatter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, \"Product Image\")))))));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/dashboard.jsx"],"names":["React","Component","Navbar","Nav","Grid","Jumbotron","Row","Col","NavItem","Button","Modal","Panel","Link","ReactDOM","FileSaver","jsPDF","domtoimage","fileDownload","Request","firebase","fire","BootstrapTable","BootstrapButton","TableHeaderColumn","TiArrowSortedDown","TiArrowSortedUp","TiPencil","TiTrash","LineChart","BarChart","Bar","Surface","ReferenceLine","ReferenceArea","AreaChart","Brush","Area","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Dashboard","props","imageFormatter","cell","row","state","weatherData","iconData","id","key","currentCity","currentTemp","currentIcon","currentDescription","currentHumidity","checkboxState","checkboxState1","checkboxStatenitrogen","checkboxStatephosphorus","checkboxStatetds","checkboxStatepH","checkboxStatetss","checkboxStatesalinity","checkboxStateconductivity","checkboxStatehardness","checkboxStateturbidity","tempPlot","doPlot","conductivityPlot","tdsPlot","salinityPlot","pHPlot","turbidityPlot","nitrogenPlot","phosphorusPlot","totalHardnessPlot","tssPlot","removeAuthListener","auth","onAuthStateChanged","user","samplesRef","database","ref","uid","on","snapshot","dataList","val","filter","orders","orders2","newState","newState2","newState3","order","push","sampleDate","sampleTaker","temp","do","conductivity","tds","salinity","pH","turbidity","nitrogen","phosphorus","totalHardness","tss","sampleNotes","sort","a","b","setState","color","colorsRef","colorList","console","log","tempColor","child","city","icon","description","humidity","fetch","api_callWeather","json","weatherResponse","symbol","weather","name","main","event","textAlign","width","height","paddingTop","overflowX"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, Grid, Jumbotron, Row, Col, NavItem, Button, Modal, Panel } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport FileSaver from 'file-saver';\nimport * as jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport fileDownload from \"js-file-download\";\nimport Request from 'superagent';\n\nimport firebase from 'firebase';\nimport { fire } from '../fire';\n\n\nimport {BootstrapTable, BootstrapButton, TableHeaderColumn} from 'react-bootstrap-table';\nimport { TiArrowSortedDown, TiArrowSortedUp, TiPencil, TiTrash } from \"react-icons/ti\";\n\nimport { LineChart, BarChart, Bar, Surface, ReferenceLine, ReferenceArea, AreaChart, Brush, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\n\n\nexport default class Dashboard extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n\n        //The data that goes into the table showing weather data\n        weatherData: [],\n        iconData: [],\n\n        id: '',\n        key: 1,\n\n        currentCity: '',\n        currentTemp: '',\n        currentIcon: '',\n        currentDescription: '',\n        currentHumidity: '',\n\n        //checkbox status\n        checkboxState: true,\n        checkboxState1: true,\n        checkboxStatenitrogen: true,\n        checkboxStatephosphorus: true,\n        checkboxStatetds: true,\n        checkboxStatepH: true,\n        checkboxStatetss: true,\n        checkboxStatesalinity: true,\n        checkboxStateconductivity: true,\n        checkboxStatehardness: true,\n        checkboxStateturbidity: true,\n\n        //these are for the graphs\n        tempPlot: 'temp',\n        doPlot: 'do',\n        conductivityPlot: 'conductivity',\n        tdsPlot: 'tds',\n        salinityPlot: 'salinity',\n        pHPlot: 'pH',\n        turbidityPlot: 'turbidity',\n        nitrogenPlot: 'nitrogen',\n        phosphorusPlot: 'phosphorus',\n        totalHardnessPlot: 'totalHardness',\n        tssPlot: 'tss',\n\n\n\n\n      }\n\n    }\n\n\n\n\n\n\n    //async allows await to be used for API calls.  Without ASYNC an error will be called saying that await is a reserved word.\n\n    //ComponentDidMount runs over and over again\n\n  async componentDidMount() {\n    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{\n      const samplesRef = fire.database().ref(`monthlySamples/${user.uid}`);\n      samplesRef.on('value', (snapshot) => {\n\n\n        let dataList = snapshot.val();\n        let filter = [];\n        let orders = snapshot.val();\n        let orders2 = snapshot.val();\n\n        let newState = [];\n        let newState2 = [];\n        let newState3 = [];\n\n      for (let order in orders) {\n        newState.push({\n          id: order,\n          sampleDate: orders[order].sampleDate,\n          sampleTaker: orders[order].sampleTaker,\n          temp: orders[order].temp,\n          do: orders[order].do,\n          conductivity: orders[order].conductivity,\n          tds: orders[order].tds,\n          salinity: orders[order].salinity,\n          pH: orders[order].pH,\n          turbidity: orders[order].turbidity,\n          nitrogen: orders[order].nitrogen,\n          phosphorus: orders[order].phosphorus,\n          totalHardness: orders[order].totalHardness,\n          tss: orders[order].tss,\n          sampleNotes: orders[order].sampleNotes,\n        });\n        newState2.push({\n          id: order,\n          sampleDate: orders[order].sampleDate,\n          sampleTaker: orders[order].sampleTaker,\n          temp: orders[order].temp,\n          do: orders[order].do,\n          conductivity: orders[order].conductivity,\n          tds: orders[order].tds,\n          salinity: orders[order].salinity,\n          pH: orders[order].pH,\n          turbidity: orders[order].turbidity,\n          nitrogen: orders[order].nitrogen,\n          phosphorus: orders[order].phosphorus,\n          totalHardness: orders[order].totalHardness,\n          tss: orders[order].tss,\n          sampleNotes: orders[order].sampleNotes,\n        });\n\n\n\n\n      }\n\n      newState2.sort(function(a, b) {\n\n        if (a.sampleDate === b.sampleDate) {\n          return 0;\n        }\n        return a.sampleDate > b.sampleDate ? 1 : -1;\n    });\n    newState.sort(function(a, b) {\n\n      if (b.sampleDate === a.sampleDate) {\n        return 0;\n      }\n      return b.sampleDate > a.sampleDate ? 1 : -1;\n  });\n\n\n\n      this.setState({\n        orders: newState,\n        orders2: newState2,\n        dataList: newState,\n        color: this.state.color,\n      });\n\n    });\n    const colorsRef = fire.database().ref(`colors/${user.uid}`);\n\n    colorsRef.on('value', (snapshot) => {\n      let colorList = snapshot.val();\n      console.log(colorList);\n      this.setState({\n        tempColor: snapshot.child('tempColor').val(),\n\n      });\n\n\n    });\n\n  });\n    let weatherData = [];\n    let city = '';\n    let temp = '';\n    let icon = '';\n    let description = '';\n    let humidity = '';\n\n    let api_callWeather =  await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${'37.997'}&lon=${'-121.71'}&units=${'imperial'}&appid=${'30573b68170d7f4400c7ac9c1c671ccf'}`);\n\n\n    let weatherResponse = await api_callWeather.json();\n\n    let symbol = weatherResponse.weather[0].icon;\n\n\n    console.log(weatherResponse)\n\n    this.setState({\n      currentCity: weatherResponse.name,\n      currentTemp: weatherResponse.main.temp,\n      currentIcon: 'http://openweathermap.org/img/w/' + weatherResponse.weather[0].icon + '.png',\n\n      currentDescription: weatherResponse.weather[0].main,\n      currentHumidity: weatherResponse.main.humidity,\n\n    })\n\nconsole.log(this.state.currentIcon)\n\n\n\n\n\n\n\n\n    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{\n\n      const samplesRef = fire.database().ref(`dailySamples/${user.uid}`);\n      samplesRef.on('value', (snapshot) => {\n\n\n    });\n  });\n  }\n\n\n\n   imageFormatter = (cell, row) => {\n      return (\n<span><img src={cell} /></span>\n)\n    }\n\n    toggleNitrogen(event) {\n        this.setState({\n          checkboxState: !this.state.checkboxState\n        });\n        const checkboxState = this.state.checkboxState;\n        if (checkboxState) {\n          this.setState({\n            nitrogenPlot: '',\n          })\n        } else {\n          this.setState({\n            nitrogenPlot: 'nitrogen',\n          })\n        }\n      }\n      togglePhosphorus(event) {\n          this.setState({\n            checkboxStatephosphorus: !this.state.checkboxStatephosphorus\n          });\n          const checkboxState = this.state.checkboxStatephosphorus;\n          if (checkboxState) {\n            this.setState({\n              phosphorusPlot: '',\n            })\n          } else {\n            this.setState({\n              phosphorusPlot: 'phosphorus',\n            })\n          }\n        }\n        toggleTemp(event) {\n            this.setState({\n              checkboxStatenitrogen: !this.state.checkboxStatenitrogen\n            });\n            const checkboxState = this.state.checkboxStatenitrogen;\n            if (checkboxState) {\n              this.setState({\n                tempPlot: '',\n              })\n            } else {\n              this.setState({\n                tempPlot: 'temp',\n              })\n            }\n          }\n          toggleTDS(event) {\n              this.setState({\n                checkboxStatetds: !this.state.checkboxStatetds\n              });\n              const checkboxState = this.state.checkboxStatetds;\n              if (checkboxState) {\n                this.setState({\n                  tdsPlot: '',\n                })\n              } else {\n                this.setState({\n                  tdsPlot: 'tds',\n                })\n              }\n            }\n            togglepH(event) {\n                this.setState({\n                  checkboxStatepH: !this.state.checkboxStatepH\n                });\n                const checkboxState = this.state.checkboxStatepH;\n                if (checkboxState) {\n                  this.setState({\n                    pHPlot: '',\n                  })\n                } else {\n                  this.setState({\n                    pHPlot: 'pH',\n                  })\n                }\n              }\n              toggletss(event) {\n                  this.setState({\n                    checkboxStatetss: !this.state.checkboxStatetss\n                  });\n                  const checkboxState = this.state.checkboxStatetss;\n                  if (checkboxState) {\n                    this.setState({\n                      tssPlot: '',\n                    })\n                  } else {\n                    this.setState({\n                      tssPlot: 'tss',\n                    })\n                  }\n                }\n                togglesalinity(event) {\n                    this.setState({\n                      checkboxStatesalinity: !this.state.checkboxStatesalinity\n                    });\n                    const checkboxState = this.state.checkboxStatesalinity;\n                    if (checkboxState) {\n                      this.setState({\n                        salinityPlot: '',\n                      })\n                    } else {\n                      this.setState({\n                        salinityPlot: 'salinity',\n                      })\n                    }\n                  }\n                  toggleHardness(event) {\n                      this.setState({\n                        checkboxStatehardness: !this.state.checkboxStatehardness\n                      });\n                      const checkboxState = this.state.checkboxStatehardness;\n                      if (checkboxState) {\n                        this.setState({\n                          totalHardnessPlot: '',\n                        })\n                      } else {\n                        this.setState({\n                          totalHardnessPlot: 'totalHardness',\n                        })\n                      }\n                    }\n                    toggleTurbidity(event) {\n                        this.setState({\n                          checkboxStateturbidity: !this.state.checkboxStateturbidity\n                        });\n                        const checkboxState = this.state.checkboxStateturbidity;\n                        if (checkboxState) {\n                          this.setState({\n                            turbidityPlot: '',\n                          })\n                        } else {\n                          this.setState({\n                            turbidityPlot: 'turbidity',\n                          })\n                        }\n                      }\n\n                      \n\n\n\n  render() {\n\n\n\n    return (\n      <Grid>\n        <Row>\n          <Col xs={11} sm={11} md={11} >\n        <Jumbotron>\n          <h1>Summer Lake</h1>\n          <p>\n            Homeowners Association\n          </p>\n\n\n\n\n        </Jumbotron>\n        <hr></hr>\n\n          <Row>\n            <Col xs={4} sm={4} md={4} >\n\n              <div>\n      <Panel bsStyle=\"primary\">\n        <Panel.Heading>\n          <Panel.Title style={{textAlign: 'center'}} componentClass=\"h3\">Weather</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body style={{textAlign: 'center'}}>\n          <h3>{this.state.currentCity}</h3>\n          <img style={{width: '75px', height: '75px'}} src={this.state.currentIcon} />\n          <p>{this.state.currentDescription}</p>\n          <p>Temperature: {this.state.currentTemp}</p>\n          <p>Humidity: {this.state.currentHumidity}</p>\n\n        </Panel.Body>\n      </Panel>\n    </div>\n    </Col>\n    <Col xs={7} sm={7} md={7} >\n\n      <div>\n<Panel bsStyle=\"primary\">\n<Panel.Heading>\n  <Panel.Title componentClass=\"h3\">Water Quality</Panel.Title>\n</Panel.Heading>\n<Panel.Body>Panel content</Panel.Body>\n</Panel>\n</div>\n</Col>\n\n\n\n\n  </Row>\n\n\n\n\n\n\n\n<Row style={{paddingTop: \"50px\"}}>\n  <Col xs={8} sm={8} md={8} >\n\n    <BootstrapTable\n    data={ this.state.weatherData }\n    containerStyle={{width: '800px', overflowX: 'scroll'}}\n    pagination\n    >\n\n    <TableHeaderColumn dataField='date' isKey> Date</TableHeaderColumn>\n    <TableHeaderColumn dataField='temp' >Temp</TableHeaderColumn>\n    <TableHeaderColumn dataField='description' >Description</TableHeaderColumn>\n    <TableHeaderColumn dataField=\"image\" dataFormat={this.imageFormatter}>Product Image</TableHeaderColumn>\n\n\n\n\n    </BootstrapTable>\n\n\n\n\n</Col>\n\n</Row>\n\n\n\n\n\n\n\n        </Col>\n        </Row>\n      </Grid>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}