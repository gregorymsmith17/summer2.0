{"ast":null,"code":"import _objectSpread from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Greg/Desktop/react/summer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Greg/Desktop/react/summer/src/components/dndDemo.jsx\";\nimport React, { Component } from 'react';\nimport { Table, Card } from 'antd';\nimport { DragDropContext, DragSource, DropTarget } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\nvar dragingIndex = -1;\nvar Types = {\n  CARD: 'card'\n};\nvar cardSource = {\n  canDrag: function canDrag(props) {\n    // You can disallow drag based on props\n    return props.isReady;\n  },\n  isDragging: function isDragging(props, monitor) {\n    // If your component gets unmounted while dragged\n    // (like a card in Kanban board dragged between lists)\n    // you can implement something like this to keep its\n    // appearance dragged:\n    return monitor.getItem().id === props.id;\n  },\n  beginDrag: function beginDrag(props, monitor, component) {\n    // Return the data describing the dragged item\n    var item = {\n      id: props.id\n    };\n    return item;\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      // You can check whether the drop was successful\n      // or if the drag ended but nobody handled the drop\n      return;\n    } // When dropped on a compatible target, do something.\n    // Read the original dragged item from getItem():\n\n\n    var item = monitor.getItem(); // You may also read the drop result from the drop target\n    // that handled the drop, if it returned an object from\n    // its drop() method.\n\n    var dropResult = monitor.getDropResult(); // This is a good place to call some Flux action\n  }\n};\n/**\n * Specifies which props to inject into your component.\n */\n\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n}\n\nvar Card1 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Card1, _React$Component);\n\n  function Card1() {\n    _classCallCheck(this, Card1);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card1).apply(this, arguments));\n  }\n\n  _createClass(Card1, [{\n    key: \"render\",\n    value: function render() {\n      // Your component receives its own props as usual\n      var id = this.props.id; // These props are injected by React DnD,\n      // as defined by your `collect` function above:\n\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource;\n      return connectDragSource(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"I am a draggable card number \", id, isDragging && ' (and I am being dragged now)')));\n    }\n  }]);\n\n  return Card1;\n}(React.Component);\n\nvar BodyRow =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(BodyRow, _React$Component2);\n\n  function BodyRow() {\n    _classCallCheck(this, BodyRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BodyRow).apply(this, arguments));\n  }\n\n  _createClass(BodyRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isOver = _this$props2.isOver,\n          connectDragSource = _this$props2.connectDragSource,\n          connectDropTarget = _this$props2.connectDropTarget,\n          moveRow = _this$props2.moveRow,\n          restProps = _objectWithoutProperties(_this$props2, [\"isOver\", \"connectDragSource\", \"connectDropTarget\", \"moveRow\"]);\n\n      var style = _objectSpread({}, restProps.style, {\n        cursor: 'move'\n      });\n\n      var className = restProps.className;\n\n      if (isOver) {\n        if (restProps.index > dragingIndex) {\n          className += ' drop-over-downward';\n        }\n\n        if (restProps.index < dragingIndex) {\n          className += ' drop-over-upward';\n        }\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"tr\", Object.assign({}, restProps, {\n        className: className,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return BodyRow;\n}(React.Component);\n\nvar rowSource = {\n  beginDrag: function beginDrag(props) {\n    dragingIndex = props.index;\n    return {\n      index: props.index\n    };\n  }\n};\nvar rowTarget = {\n  drop: function drop(props, monitor) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveRow(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n};\nvar DragableBodyRow = DropTarget('row', rowTarget, function (connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver()\n  };\n})(DragSource('row', rowSource, function (connect) {\n  return {\n    connectDragSource: connect.dragSource()\n  };\n})(BodyRow));\nvar columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age'\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address'\n}];\n\nvar DragSortingTable =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(DragSortingTable, _React$Component3);\n\n  function DragSortingTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DragSortingTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DragSortingTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [{\n        key: '1',\n        name: 'John Brown',\n        age: 32,\n        address: 'New York No. 1 Lake Park'\n      }, {\n        key: '2',\n        name: 'Jim Green',\n        age: 42,\n        address: 'London No. 1 Lake Park'\n      }, {\n        key: '3',\n        name: 'Joe Black',\n        age: 32,\n        address: 'Sidney No. 1 Lake Park'\n      }]\n    };\n    _this.components = {\n      body: {\n        row: DragableBodyRow\n      }\n    };\n\n    _this.moveRow = function (dragIndex, hoverIndex) {\n      var data = _this.state.data;\n      var dragRow = data[dragIndex];\n\n      _this.setState(update(_this.state, {\n        data: {\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]]\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(DragSortingTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Card title\",\n        bordered: false,\n        style: {\n          width: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Card content\")), React.createElement(Card, {\n        title: \"Card title\",\n        bordered: false,\n        style: {\n          width: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Card content\")), React.createElement(Card, {\n        title: \"Card title\",\n        bordered: false,\n        style: {\n          width: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Card content\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Card content\")), React.createElement(Table, {\n        columns: columns,\n        dataSource: this.state.data,\n        components: this.components,\n        onRow: function onRow(record, index) {\n          return {\n            index: index,\n            moveRow: _this2.moveRow\n          };\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DragSortingTable;\n}(React.Component);\n\nvar Demo = DragSource(Types.CARD, cardSource, collect)(Card);\nexport default Demo;","map":{"version":3,"sources":["/Users/Greg/Desktop/react/summer/src/components/dndDemo.jsx"],"names":["React","Component","Table","Card","DragDropContext","DragSource","DropTarget","HTML5Backend","update","dragingIndex","Types","CARD","cardSource","canDrag","props","isReady","isDragging","monitor","getItem","id","beginDrag","component","item","endDrag","didDrop","dropResult","getDropResult","collect","connect","connectDragSource","dragSource","Card1","BodyRow","isOver","connectDropTarget","moveRow","restProps","style","cursor","className","index","rowSource","rowTarget","drop","dragIndex","hoverIndex","DragableBodyRow","dropTarget","columns","title","dataIndex","key","DragSortingTable","state","data","name","age","address","components","body","row","dragRow","setState","$splice","width","record","Demo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Table, Card } from 'antd';\nimport { DragDropContext, DragSource, DropTarget } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\n\nlet dragingIndex = -1;\n\nconst Types = {\n  CARD: 'card'\n};\n\nconst cardSource = {\n  canDrag(props) {\n    // You can disallow drag based on props\n    return props.isReady;\n  },\n\n  isDragging(props, monitor) {\n    // If your component gets unmounted while dragged\n    // (like a card in Kanban board dragged between lists)\n    // you can implement something like this to keep its\n    // appearance dragged:\n    return monitor.getItem().id === props.id;\n  },\n\n  beginDrag(props, monitor, component) {\n    // Return the data describing the dragged item\n    const item = { id: props.id };\n    return item;\n  },\n\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      // You can check whether the drop was successful\n      // or if the drag ended but nobody handled the drop\n      return;\n    }\n\n    // When dropped on a compatible target, do something.\n    // Read the original dragged item from getItem():\n    const item = monitor.getItem();\n\n    // You may also read the drop result from the drop target\n    // that handled the drop, if it returned an object from\n    // its drop() method.\n    const dropResult = monitor.getDropResult();\n\n    // This is a good place to call some Flux action\n\n  }\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n}\n\nclass Card1 extends React.Component {\n  render() {\n    // Your component receives its own props as usual\n    const { id } = this.props;\n\n    // These props are injected by React DnD,\n    // as defined by your `collect` function above:\n    const { isDragging, connectDragSource } = this.props;\n\n    return connectDragSource(\n      <div>\n        <Card>\n        I am a draggable card number {id}\n        {isDragging && ' (and I am being dragged now)'}\n        </Card>\n      </div>\n    );\n  }\n}\n\nclass BodyRow extends React.Component {\n  render() {\n    const {\n      isOver,\n      connectDragSource,\n      connectDropTarget,\n      moveRow,\n      ...restProps\n    } = this.props;\n    const style = { ...restProps.style, cursor: 'move' };\n\n    let className = restProps.className;\n    if (isOver) {\n      if (restProps.index > dragingIndex) {\n        className += ' drop-over-downward';\n      }\n      if (restProps.index < dragingIndex) {\n        className += ' drop-over-upward';\n      }\n    }\n\n    return connectDragSource(\n      connectDropTarget(\n        <tr\n          {...restProps}\n          className={className}\n          style={style}\n        />\n      )\n    );\n  }\n}\n\nconst rowSource = {\n  beginDrag(props) {\n    dragingIndex = props.index;\n    return {\n      index: props.index,\n    };\n  },\n};\n\nconst rowTarget = {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.moveRow(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n};\n\nconst DragableBodyRow = DropTarget(\n  'row',\n  rowTarget,\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  }),\n)(\n  DragSource(\n    'row',\n    rowSource,\n    (connect) => ({\n      connectDragSource: connect.dragSource(),\n    }),\n  )(BodyRow),\n);\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address',\n}];\n\nclass DragSortingTable extends React.Component {\n  state = {\n    data: [{\n      key: '1',\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park',\n    }, {\n      key: '2',\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park',\n    }, {\n      key: '3',\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park',\n    }],\n  }\n\n  components = {\n    body: {\n      row: DragableBodyRow,\n    },\n  }\n\n  moveRow = (dragIndex, hoverIndex) => {\n    const { data } = this.state;\n    const dragRow = data[dragIndex];\n\n    this.setState(\n      update(this.state, {\n        data: {\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\n        },\n      }),\n    );\n  }\n\n  render() {\n    return (\n      <div>\n      <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n\n      <Table\n        columns={columns}\n        dataSource={this.state.data}\n        components={this.components}\n        onRow={(record, index) => ({\n          index,\n          moveRow: this.moveRow,\n        })}\n      />\n    </div>\n    );\n  }\n}\n\nconst Demo = DragSource(Types.CARD, cardSource, collect)(Card);\n\nexport default Demo;\n"]},"metadata":{},"sourceType":"module"}