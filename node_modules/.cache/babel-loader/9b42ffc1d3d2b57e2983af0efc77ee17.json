{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visibleRowIdsSelector = exports.visibleDataSelector = exports.currentPageDataSelector = exports.bottomSpacerSelector = exports.topSpacerSelector = exports.endIndexSelector = exports.startIndexSelector = exports.verticalScrollChangeSelector = exports.hoizontalScrollChangeSelector = exports.visibleDataLengthSelector = exports.visibleRecordCountSelector = exports.tableWidthSelector = exports.tableHeightSelector = exports.currentHeightSelector = exports.rowHeightSelector = exports.positionSettingsSelector = undefined;\n\nvar _reselect = require('reselect');\n\nvar _localSelectors = require('../../local/selectors/localSelectors');\n\nvar positionSettingsSelector = exports.positionSettingsSelector = function positionSettingsSelector(state) {\n  return state.get('positionSettings');\n};\n\nvar rowHeightSelector = exports.rowHeightSelector = function rowHeightSelector(state) {\n  return state.getIn(['positionSettings', 'rowHeight']);\n};\n\nvar currentHeightSelector = exports.currentHeightSelector = function currentHeightSelector(state) {\n  return state.getIn(['currentPosition', 'height']);\n};\n\nvar tableHeightSelector = exports.tableHeightSelector = function tableHeightSelector(state) {\n  return state.getIn(['positionSettings', 'tableHeight']);\n};\n\nvar tableWidthSelector = exports.tableWidthSelector = function tableWidthSelector(state) {\n  return state.getIn(['positionSettings', 'tableWidth']);\n}; // From what i can tell from the original virtual scrolling plugin...\n// 1. We want to get the visible record count\n// 2. Get the size of the dataset we're working with (whether thats local or remote)\n// 3. Figure out the renderedStart and End display index\n// 4. Show only the records that'd fall in the render indexes\n\n/** Gets the number of viisble rows based on the height of the container and the rowHeight\n */\n\n\nvar visibleRecordCountSelector = exports.visibleRecordCountSelector = (0, _reselect.createSelector)(rowHeightSelector, currentHeightSelector, function (rowHeight, currentHeight) {\n  return Math.ceil(currentHeight / rowHeight);\n});\nvar visibleDataLengthSelector = exports.visibleDataLengthSelector = (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, function (sortedData) {\n  return sortedData.size;\n});\n\nvar hoizontalScrollChangeSelector = exports.hoizontalScrollChangeSelector = function hoizontalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'xScrollChangePosition']) || 0;\n};\n\nvar verticalScrollChangeSelector = exports.verticalScrollChangeSelector = function verticalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'yScrollChangePosition']) || 0;\n};\n\nvar startIndexSelector = exports.startIndexSelector = (0, _reselect.createSelector)(verticalScrollChangeSelector, rowHeightSelector, visibleRecordCountSelector, function (verticalScrollPosition, rowHeight, visibleRecordCount) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n});\nvar endIndexSelector = exports.endIndexSelector = (0, _reselect.createSelector)(startIndexSelector, visibleRecordCountSelector, visibleDataLengthSelector, function (startDisplayIndex, visibleRecordCount, visibleDataLength) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.min(Math.floor(startDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n});\nvar topSpacerSelector = exports.topSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, startIndexSelector, function (rowHeight, startIndex) {\n  return rowHeight * startIndex;\n});\nvar bottomSpacerSelector = exports.bottomSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, visibleDataLengthSelector, endIndexSelector, function (rowHeight, visibleDataLength, endIndex) {\n  return rowHeight * (visibleDataLength - endIndex);\n});\n/** Gets the current page of data\n * Won't be memoized :cry:\n */\n\nvar currentPageDataSelector = exports.currentPageDataSelector = function currentPageDataSelector() {\n  return (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, startIndexSelector, endIndexSelector, function (sortedData, startDisplayIndex, endDisplayIndex) {\n    return sortedData.skip(startDisplayIndex).take(endDisplayIndex - startDisplayIndex);\n  }).apply(undefined, arguments);\n};\n/** Get the visible data (and only the columns that are visible)\n */\n\n\nvar visibleDataSelector = exports.visibleDataSelector = (0, _reselect.createSelector)(currentPageDataSelector, _localSelectors.visibleColumnsSelector, function (currentPageData, visibleColumns) {\n  return getVisibleDataForColumns(currentPageData, visibleColumns);\n});\n/** Gets the griddleIds for the visible rows */\n\nvar visibleRowIdsSelector = exports.visibleRowIdsSelector = (0, _reselect.createSelector)(currentPageDataSelector, function (currentPageData) {\n  return currentPageData.map(function (c) {\n    return c.get('griddleKey');\n  });\n});","map":null,"metadata":{},"sourceType":"script"}