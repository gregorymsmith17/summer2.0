{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNavigatorCoords = getNavigatorCoords;\nexports.degreeToCardinal = degreeToCardinal;\nvar config = {\n  name: 'geoUtils',\n  errorMessage: {\n    geolocation: 'geolocation not supported'\n  }\n};\nvar supported = {\n  geolocation: null\n};\nvar coords = null;\n/**\r\n * Get current location coordinates if supported by browser\r\n * @ref https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition\r\n * @param {object} [options] - options for navigator.geolocation.getCurrentPosition\r\n * @param {bool} [ignoreCache] - set to true to ignore basic caching\r\n * @return {Promise} - resolves to coords property of navigator response\r\n */\n\nfunction getNavigatorCoords(options, ignoreCache) {\n  return new Promise(function (resolve, reject) {\n    // check for browser support\n    if (supported.geolocation === null) {\n      supported.geolocation = 'geolocation' in navigator;\n    }\n\n    if (supported.geolocation) {\n      if (coords && !ignoreCache) {\n        resolve(coords);\n      } else {\n        navigator.geolocation.getCurrentPosition( // success\n        function (position) {\n          coords = position.coords;\n          resolve(position.coords);\n        }, // error\n        function (e) {\n          reject(config.name + ' error(' + e.code + ') :' + e.message);\n        }, // optional\n        options);\n      }\n    } else {\n      reject(config.errorMessage.geolocation);\n    }\n  });\n}\n/**\r\n * Convert degree to cardinal direction\r\n * @see {@link https://gist.github.com/felipeskroski/8aec22f01dabdbf8fb6b|Original}\r\n * @param {Number} degree- degree to convert\r\n * @param {Boolean} [secondaryInterCardinals] - whether to include secondary interCardinal directions (i.e. 'NNE', 'SSW')\r\n * @return {String} - Cardinal direction\r\n */\n\n\nfunction degreeToCardinal(degree, secondaryInterCardinals) {\n  if (degree > 11.25 && degree < 33.75) return secondaryInterCardinals ? 'NNE' : 'NE';else if (degree > 33.75 && degree < 56.25) return secondaryInterCardinals ? 'ENE' : 'NE';else if (degree > 56.25 && degree < 78.75) return 'E';else if (degree > 78.75 && degree < 101.25) return secondaryInterCardinals ? 'ESE' : 'SE';else if (degree > 101.25 && degree < 123.75) return secondaryInterCardinals ? 'ESE' : 'SE';else if (degree > 123.75 && degree < 146.25) return 'SE';else if (degree > 146.25 && degree < 168.75) return secondaryInterCardinals ? 'SSE' : 'SE';else if (degree > 168.75 && degree < 191.25) return 'S';else if (degree > 191.25 && degree < 213.75) return secondaryInterCardinals ? 'SSW' : 'SW';else if (degree > 213.75 && degree < 236.25) return 'SW';else if (degree > 236.25 && degree < 258.75) return secondaryInterCardinals ? 'WSW' : 'SW';else if (degree > 258.75 && degree < 281.25) return 'W';else if (degree > 281.25 && degree < 303.75) return secondaryInterCardinals ? 'WNW' : 'NW';else if (degree > 303.75 && degree < 326.25) return 'NW';else if (degree > 326.25 && degree < 348.75) return secondaryInterCardinals ? 'NNW' : 'NW';else return 'N';\n}\n\nexports.default = {\n  getNavigatorCoords: getNavigatorCoords,\n  degreeToCardinal: degreeToCardinal\n};","map":null,"metadata":{},"sourceType":"script"}